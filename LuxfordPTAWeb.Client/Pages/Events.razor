@page "/events"
@inject HttpClient Http
@inject LuxfordPTAWeb.Client.Code.SchoolYearSupport SchoolYearSupport
@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.Enums
@using LuxfordPTAWeb.Shared.DTOs

<PageTitle>Events - @(selectedSchoolYear?.Name ?? "Loading...")</PageTitle>

<div class="card shadow-sm mb-4">
    <div class="card-body">
        <h1 class="card-title text-center mb-3">Events for @(selectedSchoolYear?.Name ?? "Loading...")!</h1>
        <p class="lead text-center mb-0">
            @if (isCurrentSchoolYear)
            {
                <span>Welcome to the events page for Luxford Elementary School. Here you'll find both PTA and school events, organized by category to help you plan your year and stay involved in our community.</span>
            }
            else
            {
                <span>Here are the events that helped make @selectedSchoolYear?.Name a great year at Luxford Elementary. Browse by category to see what happened!</span>
            }
        </p>
    </div>
</div>

@if (!string.IsNullOrEmpty(selectedSchoolYear?.PrintableEventCalendar))
{
    <div class="alert alert-primary text-center mb-4">
        <h5 class="mb-2">📅 <strong><a href="@selectedSchoolYear.PrintableEventCalendar" target="_blank">Download Printable Event Calendar →</a></strong></h5>
        <em>Print and post this handy calendar with all events for the @selectedSchoolYear.Name school year!</em>
    </div>
}

@if (isCurrentSchoolYear)
{
    <h2 class="h4 mt-4">📅 Upcoming Events</h2>
    @if (upcomingEvents == null)
    {
        <div class="alert alert-info">
            <em>Loading upcoming events...</em>
        </div>
    }
    else if (!upcomingEvents.Any())
    {
        <div class="alert alert-warning">
            <em>No upcoming events in the next 30 days.</em>
        </div>
    }
    else
    {
        <div class="row mb-4">
            @foreach (var evt in upcomingEvents.Take(6))
            {
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100 border-start border-4 border-success">
                        <div class="card-body">
                            <h6 class="card-title">@evt.Title</h6>
                            <p class="text-muted mb-2">
                                <i class="bi bi-calendar"></i> @evt.Date.ToString("MMMM d, yyyy")
                            </p>
                            @if (!string.IsNullOrWhiteSpace(evt.Location))
                            {
                                <p class="text-muted mb-2">
                                    <i class="bi bi-geo-alt"></i> @evt.Location
                                </p>
                            }
                            @if (!string.IsNullOrWhiteSpace(evt.Description))
                            {
                                <p class="card-text small">@TruncateDescription(evt.Description, 80)</p>
                            }
                            @if (evt.EventCat != null)
                            {
                                <span class="badge bg-light text-dark">@evt.EventCat.Name</span>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}
else
{
    <h2 class="h4 mt-4">📅 Past Events from @selectedSchoolYear?.Name</h2>
}

<h2 class="h4 mt-4">Event Categories</h2>
<p>@(isCurrentSchoolYear ? "Browse our events by category:" : $"Events from {selectedSchoolYear?.Name} organized by category:")</p>

@if (eventCategories == null || allEvents == null)
{
    <div class="alert alert-info">
        <em>Loading event categories and events...</em>
    </div>
}
else
{
    <div class="row mb-4">
        @foreach (var category in eventCategories.Where(ec => ec.IsActive).OrderBy(ec => ec.DisplayOrder))
        {
            var categoryEvents = GetEventsForCategory(category.Id);
            var subcategories = GetSubcategoriesForCategory(category.Id);
            
            var colClass = (int)category.Size == 1 ? "col-12 mb-4" : "col-md-6 mb-4";
            <div class="@colClass">
                <div class="card h-100">
                    <div class="card-header @GetHeaderColorClass(category) text-white">
                        <h5 class="mb-0">
                            @if (!string.IsNullOrEmpty(category.Icon))
                            {
                                <i class="@category.Icon me-2"></i>
                            }
                            @category.Name
                            <span class="badge bg-light text-dark ms-2">@categoryEvents.Count() events</span>
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (!categoryEvents.Any() && !subcategories.Any())
                        {
                            <p class="text-muted mb-0">@category.Description</p>
                            <p class="text-muted small mt-2">No events scheduled for this category.</p>
                        }
                        else if (subcategories.Any())
                        {
                            <!-- Show subcategories with their next event or description -->
                            @foreach (var subcat in subcategories.OrderBy(sc => sc.DisplayOrder))
                            {
                                var subcatEvents = categoryEvents.Where(e => e.EventCatSub?.Id == subcat.Id);
                                var nextEvent = GetNextEventForSubcategory(subcatEvents);
                                
                                <div class="mb-3 @(subcat != subcategories.Last() ? "border-bottom pb-2" : "")">
                                    <h6 class="text-primary mb-1">
                                        @if (!string.IsNullOrEmpty(subcat.Icon))
                                        {
                                            <i class="@subcat.Icon @subcat.ColorClass me-1"></i>
                                        }
                                        @subcat.Name
                                    </h6>
                                    
                                    @if (nextEvent != null)
                                    {
                                        <div class="small">
                                            <strong>@(isCurrentSchoolYear ? "Next" : "Event"):</strong> @nextEvent.Title
                                            <br>
                                            <span class="text-muted">
                                                <i class="bi bi-calendar"></i> @nextEvent.Date.ToString("MMM d, yyyy")
                                                @if (!string.IsNullOrEmpty(nextEvent.Location))
                                                {
                                                    <br><i class="bi bi-geo-alt"></i> @nextEvent.Location
                                                }
                                            </span>
                                        </div>
                                        
                                        @if (subcatEvents.Count() > 1)
                                        {
                                            <div class="mt-1">
                                                <small class="text-muted">+@(subcatEvents.Count() - 1) more events</small>
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <p class="small text-muted mb-1">@subcat.Description</p>
                                        @if (!subcatEvents.Any())
                                        {
                                            <small class="text-muted">No events scheduled</small>
                                        }
                                    }
                                </div>
                            }
                            
                            <!-- Show events without subcategories -->
                            @if (GetEventsWithoutSubcategory(categoryEvents).Any())
                            {
                                var eventsWithoutSubcat = GetEventsWithoutSubcategory(categoryEvents);
                                var nextGeneralEvent = GetNextEventForSubcategory(eventsWithoutSubcat);
                                if (nextGeneralEvent != null)
                                {
                                    <div class="mb-3 border-top pt-2">
                                        <h6 class="text-secondary mb-1">General Events</h6>
                                        <div class="small">
                                            <strong>@(isCurrentSchoolYear ? "Next" : "Event"):</strong> @nextGeneralEvent.Title
                                            <br>
                                            <span class="text-muted">
                                                <i class="bi bi-calendar"></i> @nextGeneralEvent.Date.ToString("MMM d, yyyy")
                                            </span>
                                        </div>
                                        @if (eventsWithoutSubcat.Count() > 1)
                                        {
                                            <div class="mt-1">
                                                <small class="text-muted">+@(eventsWithoutSubcat.Count() - 1) more events</small>
                                            </div>
                                        }
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <!-- Category without subcategories - show next event or description -->
                            var nextEvent = GetNextEventForSubcategory(categoryEvents);
                            @if (nextEvent != null)
                            {
                                <div class="mb-3">
                                    <h6 class="text-primary mb-1">@(isCurrentSchoolYear ? "Next Event" : "Event"): @nextEvent.Title</h6>
                                    <div class="small text-muted">
                                        <i class="bi bi-calendar"></i> @nextEvent.Date.ToString("MMM d, yyyy")
                                        @if (!string.IsNullOrEmpty(nextEvent.Location))
                                        {
                                            <br><i class="bi bi-geo-alt"></i> @nextEvent.Location
                                        }
                                    </div>
                                    @if (!string.IsNullOrEmpty(nextEvent.Description))
                                    {
                                        <p class="small mt-1 mb-1">@TruncateDescription(nextEvent.Description, 100)</p>
                                    }
                                </div>
                                
                                @if (categoryEvents.Count() > 1)
                                {
                                    <div class="mt-2">
                                        <small class="text-muted">+@(categoryEvents.Count() - 1) more events in this category</small>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted mb-0">@category.Description</p>
                            }
                        }
                        
                        @if (category.ShowViewEventsButton && categoryEvents.Any())
                        {
                            <div class="mt-3 pt-2 border-top">
                                <a href="events/category/@category.Slug" class="btn btn-sm btn-outline-primary">
                                    View All @category.Name <i class="bi bi-arrow-right"></i>
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}

@if (showGetInvolved)
{
    <div class="card mb-4">
        <div class="card-header bg-primary text-white fw-bold">🙋‍♀️ Get Involved</div>
        <div class="card-body">
            <p>We're always looking for volunteers to help make our events successful! Contact our @contactPersonTitle: @contactPersonName</p>
            @if (!string.IsNullOrEmpty(contactPersonEmail))
            {
                <p class="mb-0"><strong>Email:</strong> <a href="mailto:@contactPersonEmail">@contactPersonEmail</a></p>
            }
        </div>
    </div>
}

<div class="alert alert-success text-center mt-4">
    <em>@(isCurrentSchoolYear ? "Mark your calendars and join us for these wonderful community events!" : $"These events helped make {selectedSchoolYear?.Name} a great year!")</em><br />
    @if (isCurrentSchoolYear)
    {
        <span><strong>Email List</strong> - Contact us at: TBD</span>
    }
</div>

@code {
    private List<Event>? upcomingEvents;
    private List<EventCat>? eventCategories;
    private List<EventCatSub>? eventSubcategories;
    private List<Event>? allEvents;
    private SchoolYear? selectedSchoolYear;
    private bool isCurrentSchoolYear = false;
    private bool showGetInvolved = false;
    private string contactPersonTitle = "Event Coordinator";
    private string contactPersonName = "PTA Board";
    private string contactPersonEmail = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Get the selected school year from the header/localStorage
        selectedSchoolYear = await SchoolYearSupport.GetSelectedSchoolYearInfoAsync();
        
        if (selectedSchoolYear != null)
        {
            // Determine if this is the current school year
            isCurrentSchoolYear = selectedSchoolYear.Status == SchoolYearStatus.CurrentYear;
            showGetInvolved = isCurrentSchoolYear;
            
            await LoadEventCategories();
            await LoadEventSubcategories();
            await LoadAllEvents();
            
            if (isCurrentSchoolYear)
            {
                await LoadUpcomingEvents();
            }
            
            if (showGetInvolved)
            {
                await LoadContactPerson();
            }
        }
    }

    private async Task LoadEventCategories()
    {
        try
        {
            eventCategories = await Http.GetFromJsonAsync<List<EventCat>>("api/eventcat");
        }
        catch (Exception)
        {
            eventCategories = new List<EventCat>();
        }
    }

    private async Task LoadEventSubcategories()
    {
        try
        {
            eventSubcategories = await Http.GetFromJsonAsync<List<EventCatSub>>("api/eventcatsub");
        }
        catch (Exception)
        {
            eventSubcategories = new List<EventCatSub>();
        }
    }

    private async Task LoadUpcomingEvents()
    {
        if (selectedSchoolYear == null) return;
        
        try
        {
            // Get upcoming events for the current school year
            var events = await Http.GetFromJsonAsync<List<Event>>($"api/events/by-school-year/{selectedSchoolYear.Id}");
            
            var now = DateTime.UtcNow.Date;
            var in30Days = now.AddDays(30);
            
            upcomingEvents = events?
                .Where(e => e.Date >= now && e.Date <= in30Days)
                .OrderBy(e => e.Date)
                .ToList() ?? new List<Event>();
        }
        catch (Exception)
        {
            upcomingEvents = new List<Event>();
        }
    }

    private async Task LoadAllEvents()
    {
        if (selectedSchoolYear == null) return;
        
        try
        {
            // Get all events for the selected school year
            if (isCurrentSchoolYear)
            {
                // For current year, only get active events
                allEvents = await Http.GetFromJsonAsync<List<Event>>($"api/events/by-school-year/{selectedSchoolYear.Id}");
            }
            else
            {
                // For past years, we need all events (including completed), use admin endpoint if available
                try 
                {
                    allEvents = await Http.GetFromJsonAsync<List<Event>>($"api/events/all-admin?schoolYearId={selectedSchoolYear.Id}");
                    // Filter to show completed and active events for past years
                    allEvents = allEvents?
                        .Where(e => e.Status == EventStatus.Completed ||
                                   e.Status == EventStatus.Active)
                        .ToList() ?? new List<Event>();
                }
                catch
                {
                    // Fallback to public endpoint for past years
                    allEvents = await Http.GetFromJsonAsync<List<Event>>($"api/events/by-school-year/{selectedSchoolYear.Id}");
                }
            }
        }
        catch (Exception)
        {
            allEvents = new List<Event>();
        }
    }

    private async Task LoadContactPerson()
    {
        if (selectedSchoolYear == null) return;
        
        try
        {
            // Use the public board positions endpoint
            var boardPositions = await Http.GetFromJsonAsync<List<AssignedUserDTO>>($"api/boardpositions/public/by-schoolyear/{selectedSchoolYear.Id}");
            
            if (boardPositions?.Any() == true)
            {
                // Look for Event Coordinator first
                var eventCoordinator = boardPositions.FirstOrDefault(bp => 
                    bp.RoleTitle?.Contains("Event Coordinator", StringComparison.OrdinalIgnoreCase) == true ||
                    bp.RoleTitle?.Contains("VP of Volunteer Engagement", StringComparison.OrdinalIgnoreCase) == true);
                
                if (eventCoordinator != null)
                {
                    contactPersonTitle = eventCoordinator.RoleTitle ?? "Event Coordinator";
                    contactPersonName = eventCoordinator.DisplayName ?? "PTA Board";
                    // Don't expose email from public endpoint for privacy
                }
                else
                {
                    // Fall back to President
                    var president = boardPositions.FirstOrDefault(bp => 
                        bp.RoleTitle?.Contains("President", StringComparison.OrdinalIgnoreCase) == true);
                    
                    if (president != null)
                    {
                        contactPersonTitle = "President";
                        contactPersonName = president.DisplayName ?? "PTA Board";
                    }
                }
            }
        }
        catch (Exception)
        {
            // Keep default values
        }
    }

    private IEnumerable<Event> GetEventsForCategory(int categoryId)
    {
        return allEvents?.Where(e => e.EventCat?.Id == categoryId) ?? Enumerable.Empty<Event>();
    }

    private IEnumerable<EventCatSub> GetSubcategoriesForCategory(int categoryId)
    {
        return eventSubcategories?.Where(esc => esc.EventCatId == categoryId && esc.IsActive) ?? Enumerable.Empty<EventCatSub>();
    }

    private IEnumerable<Event> GetEventsWithoutSubcategory(IEnumerable<Event> categoryEvents)
    {
        return categoryEvents.Where(e => e.EventCatSub == null);
    }

    private Event? GetNextEventForSubcategory(IEnumerable<Event> events)
    {
        if (isCurrentSchoolYear)
        {
            // For current year, get next upcoming event
            var now = DateTime.UtcNow;
            return events
                .Where(e => e.Date >= now)
                .OrderBy(e => e.Date)
                .FirstOrDefault();
        }
        else
        {
            // For past years, get the first/earliest event
            return events
                .OrderBy(e => e.Date)
                .FirstOrDefault();
        }
    }

    private string GetHeaderColorClass(EventCat category)
    {
        return category.ColorClass switch
        {
            "text-danger" => "bg-danger",
            "text-success" => "bg-success", 
            "text-primary" => "bg-primary",
            "text-info" => "bg-info",
            "text-warning" => "bg-warning",
            "text-secondary" => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string TruncateDescription(string description, int maxLength)
    {
        if (string.IsNullOrEmpty(description) || description.Length <= maxLength)
            return description;
        
        return description.Substring(0, maxLength - 3) + "...";
    }
}
