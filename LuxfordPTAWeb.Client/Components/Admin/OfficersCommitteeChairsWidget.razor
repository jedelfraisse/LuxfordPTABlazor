@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.Enums
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="card h-100">
	<div class="card-header text-black @(showOverride ? "bg-warning" : "")">
		<h5 class="mb-0">
			<i class="bi bi-person-circle"></i> Officers & Committee Chairs
			@if (showOverride)
			{
				<span class="badge bg-dark ms-2">Edit Mode</span>
			}
		</h5>
	</div>
	<div class="card-body">
		<p>Here are the assigned board officers and committee chairs for <strong>@SchoolYear?.Name</strong>:</p>
		<div class="row mb-3">
			<div class="col-md-6">
				<InputCheckbox @bind-Value="boardShowAllPositions" @onchange="OnBoardShowAllPositionsChanged"></InputCheckbox> Show All Positions
			</div>
		</div>
		<table class="table">
			<thead>
				<tr>
					<th>Title</th>
					<th>Assigned User</th>
					<th>Type</th>
					@if (boardShowAllPositions)
					{
						<th width="60">Edit</th>
					}
					@if (showOverride)
					{
						<th>Action</th>
					}
				</tr>
			</thead>
			<tbody>
				@{
					// Filter positions to current school year only
					var filteredBoardPositions = boardPositions.Where(bp => bp.SchoolYearId == SchoolYear?.Id).ToList();

					// When checked, show all board positions for the selected year
					// When unchecked, show required positions (filled or unfilled) AND any filled non-required positions
					var allTitles = requiredTitles; // Now contains all titles
					var actualRequiredIds = allTitles.Where(t => t.IsRequired).Select(t => t.Id).ToHashSet();
					var filledPositions = filteredBoardPositions.Where(bp => bp.AssignedUser != null).ToList();

					var positionsToDisplay = boardShowAllPositions
					? filteredBoardPositions.OrderBy(bp => bp.BoardPositionTitle.SortOrder).ToList()
					: allTitles
					.Where(t => t.IsRequired) // Only required titles
					.OrderBy(t => t.SortOrder)
					.Select(t => filteredBoardPositions.FirstOrDefault(bp => bp.BoardPositionTitleId == t.Id) ?? new BoardPosition { BoardPositionTitle = t, BoardPositionTitleId = t.Id, SchoolYearId = SchoolYear?.Id ?? 0 })
					.Concat(
					filledPositions.Where(bp => !actualRequiredIds.Contains(bp.BoardPositionTitleId))
					)
					.OrderBy(bp => bp.BoardPositionTitle.SortOrder)
					.ToList();
				}
				@foreach (var pos in positionsToDisplay)
				{
					var title = pos.BoardPositionTitle;
					<tr>
						<td>
							@title?.Title
							@if (title?.IsRequired == true)
							{
								<span class="text-warning ms-1" title="Required">
									<i class="bi bi-star-fill"></i>
								</span>
							}
						</td>
						<td>
							@if (pos.AssignedUser != null)
							{
								@pos.AssignedUser.FullName
							}
							else
							{
								<span class="text-danger">Unfilled</span>
							}
						</td>
						<td>
							@(title?.IsElected == true ? "Elected" : "Appointed")
						</td>
						@if (boardShowAllPositions)
						{
							<td>
								@if (title != null)
								{
									<button type="button" class="btn btn-outline-primary btn-sm" 
											title="Edit @title.Title" 
											@onclick="() => EditPositionTitle(title)">
										<i class="bi bi-pencil"></i>
									</button>
								}
							</td>
						}
						@if (showOverride)
						{
							<td>
								<select @onchange="(e) => OnUserSelected(title, pos, e.Value?.ToString())">
									<option value="null">Unfilled</option>
									<option value="new">New User</option>
									@foreach (var user in availableUsers)
									{
										<option value="@user.Id" selected="@(pos?.UserId == user.Id)">
											@user.LastName, @user.FirstName
										</option>
									}
								</select>
							</td>
						}
					</tr>
				}
			</tbody>
		</table>
		<div class="row align-items-center">
			<div class="col">
				<p class="mb-0">
					<span class="text-warning ms-1" title="Required">
						<i class="bi bi-star-fill"></i>
					</span> Required Position
				</p>
			</div>
			<div class="col-auto">
				@if (!showOverride)
				{
					<button class="btn btn-outline-danger btn-sm" @onclick="SwapOverride">
						<i class="bi bi-pencil"></i> Edit Assignments
					</button>
				}
				else
				{
					<button class="btn btn-outline-secondary btn-sm" @onclick="SwapOverride">
						<i class="bi bi-x"></i> Cancel Editing
					</button>
				}
				@if (boardShowAllPositions)
				{
					<button class="btn btn-outline-success btn-sm ms-2" @onclick="ShowAddTitleForm">
						<i class="bi bi-plus-circle"></i> Add New Position Title
					</button>
				}
				@if (requiredTitles.Any(t => t.IsElected && t.ElectionEventId == null))
				{
					<button class="btn btn-warning btn-sm ms-2" @onclick="CreateElectionEvent">
						<i class="bi bi-ballot"></i> Create Election Event
					</button>
				}
			</div>
		</div>

		<!-- Add/Edit Position Title Form -->
		@if (boardShowAllPositions && (showAddTitleForm || editingPositionTitle != null))
		{
			<div class="card mt-3 border-success">
				<div class="card-header bg-light">
					<h6 class="mb-0">
						<i class="bi bi-@(editingPositionTitle != null ? "pencil" : "plus-circle")"></i> 
						@(editingPositionTitle != null ? "Edit Position Title" : "Add New Position Title")
					</h6>
				</div>
				<div class="card-body">
					<EditForm Model="newPositionTitle" OnValidSubmit="SavePositionTitle">
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" />
						
						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label for="titleName" class="form-label">Position Title *</label>
									<InputText id="titleName" @bind-Value="newPositionTitle.Title" class="form-control" 
											   placeholder="e.g., Treasurer, Secretary" />
									<ValidationMessage For="() => newPositionTitle.Title" class="text-danger" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="roleType" class="form-label">Role Type *</label>
									<InputSelect id="roleType" @bind-Value="newPositionTitle.RoleType" class="form-select">
										<option value="@BoardRoleType.Officer">Officer</option>
										<option value="@BoardRoleType.CommitteeChair">Committee Chair</option>
										<option value="@BoardRoleType.ExOfficio">Ex-Officio</option>
										<option value="@BoardRoleType.MemberAtLarge">Member at Large</option>
									</InputSelect>
								</div>
							</div>
						</div>
						
						<div class="row">
							<div class="col-md-6">
								<div class="form-check mb-3">
									<InputCheckbox id="isRequired" @bind-Value="newPositionTitle.IsRequired" class="form-check-input" />
									<label for="isRequired" class="form-check-label">
										Required Position
									</label>
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-check mb-3">
									<InputCheckbox id="isElected" @bind-Value="newPositionTitle.IsElected" class="form-check-input" />
									<label for="isElected" class="form-check-label">
										Elected Position
									</label>
								</div>
							</div>
						</div>
						
						<div class="mb-3">
							<label for="description" class="form-label">Description</label>
							<InputTextArea id="description" @bind-Value="newPositionTitle.Description" class="form-control" 
										   rows="3" placeholder="Describe the responsibilities and duties of this position..." />
						</div>
						
						<div class="d-flex gap-2">
							<button type="submit" class="btn btn-success btn-sm">
								<i class="bi bi-check-circle"></i> 
								@(editingPositionTitle != null ? "Update" : "Create") Position
							</button>
							<button type="button" class="btn btn-secondary btn-sm" @onclick="CancelAddTitleForm">
								<i class="bi bi-x-circle"></i> Cancel
							</button>
						</div>
					</EditForm>
				</div>
			</div>
		}
	</div>
</div>

<!-- Assignment Dialog -->
@if (showAssignDialog)
{
	<div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.5)">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header bg-warning">
					<h5 class="modal-title">
						@(pendingAssignUserId == "null"
						? "Remove Assigned User"
						: "Assign Board Position")
					</h5>
				</div>
				<div class="modal-body">
					<p>
						Are you sure you want to @(pendingAssignUserId == "null"
						? "unassign"
						: "assign") <strong>@pendingAssignTitle?.Title</strong>?
					</p>
					@if (pendingAssignUserId == "new")
					{
						<div class="mb-2">
							<label>First Name</label>
							<input class="form-control" @bind="newUserFirstName" @ref="firstNameInputRef" />
						</div>
						<div class="mb-2">
							<label>Last Name</label>
							<input class="form-control" @bind="newUserLastName" />
						</div>
						<div class="mb-2">
							<label>Email</label>
							<input class="form-control" @bind="newUserEmail" type="email" />
						</div>
					}
					else if (!string.IsNullOrEmpty(pendingAssignUserName))
					{
						<p>
							<strong>Person:</strong> @pendingAssignUserName
						</p>
					}
					@if (pendingAssignTitle?.IsElected == true)
					{
						<div class="alert alert-warning mt-2">
							<i class="bi bi-exclamation-triangle"></i>
							This is an elected position. Assigning a user will override the normal election process.
						</div>
					}
				</div>
				<div class="modal-footer">
					@if (pendingAssignUserId == "new")
					{
						<button class="btn btn-success" @onclick="AddAndAssignNewUserAsync">Add and Assign</button>
					}
					else
					{
						<button class="btn btn-success" @onclick="ConfirmAssignUserAsync">Assign</button>
					}
					<button class="btn btn-secondary" @onclick="CancelAssignDialog">Cancel</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public SchoolYear? SchoolYear { get; set; }
	[Parameter] public List<ApplicationUser> AvailableUsers { get; set; } = new();
	
	// Internal state
	private List<BoardPosition> boardPositions = new();
	private List<BoardPositionTitle> requiredTitles = new();
	private bool showOverride = false;
	private bool boardShowAllPositions = false;
	private bool showAssignDialog = false;
	private BoardPositionTitle? pendingAssignTitle;
	private string? pendingAssignUserId;
	private string? pendingAssignUserName;
	private BoardPosition? pendingAssignBoardPosition;
	private string newUserFirstName = "";
	private string newUserLastName = "";
	private string newUserEmail = "";
	private bool shouldFocusFirstName = false;
	private ElementReference firstNameInputRef;

	// Add/Edit Position Title fields
	private bool showAddTitleForm = false;
	private BoardPositionTitle? editingPositionTitle = null;
	private BoardPositionTitle newPositionTitle = new();

	// For external access
	private List<ApplicationUser> availableUsers => AvailableUsers;

	protected override async Task OnParametersSetAsync()
	{
		if (SchoolYear != null)
		{
			await LoadBoardPositionsAsync();
			await LoadBoardPositionTitles();
		}
	}

	private async Task LoadBoardPositionsAsync()
	{
		if (SchoolYear == null) return;
		
		try
		{
			boardPositions = await Http.GetFromJsonAsync<List<BoardPosition>>($"api/boardpositions/all-by-schoolyear/{SchoolYear.Id}") ?? new List<BoardPosition>();
		}
		catch (Exception)
		{
			boardPositions = new List<BoardPosition>();
		}
	}

	private async Task LoadBoardPositionTitles()
	{
		try
		{
			requiredTitles = await Http.GetFromJsonAsync<List<BoardPositionTitle>>("api/boardpositions/titles") ?? new List<BoardPositionTitle>();
		}
		catch (Exception)
		{
			requiredTitles = new List<BoardPositionTitle>();
		}
	}

	private async Task OnBoardShowAllPositionsChanged(ChangeEventArgs e)
	{
		boardShowAllPositions = (bool)e.Value!;
		
		// Clean up form state when hiding "Show All Positions"
		if (!boardShowAllPositions)
		{
			CancelAddTitleForm();
		}
		
		StateHasChanged();
	}

	private async Task AssignUserOverride(int boardPositionTitleId, string? userId)
	{
		try
		{
			var payload = new { BoardPositionTitleId = boardPositionTitleId, UserId = userId, SchoolYearId = SchoolYear?.Id };
			await Http.PutAsJsonAsync("api/boardpositions/assign-user-override", payload);
			
			// Reload board positions after assignment
			await LoadBoardPositionsAsync();
		}
		catch (Exception)
		{
			// Handle error silently for now
		}
	}

	private void CreateElectionEvent()
	{
		NavigationManager.NavigateTo("/admin/events/create-election");
	}

	private void SwapOverride()
	{
		showOverride = !showOverride;
	}

	private void OnUserSelected(BoardPositionTitle? title, BoardPosition? pos, string? value)
	{
		pendingAssignTitle = title;
		pendingAssignBoardPosition = pos;
		pendingAssignUserId = value;
		if (value == "new")
		{
			newUserFirstName = "";
			newUserLastName = "";
			newUserEmail = "";
			pendingAssignUserName = null;
		}
		else if (!string.IsNullOrEmpty(value) && value != "null")
		{
			var user = availableUsers.FirstOrDefault(u => u.Id == value);
			pendingAssignUserName = user?.FullName;
		}
		else
		{
			pendingAssignUserName = null;
		}
		showAssignDialog = true;
		shouldFocusFirstName = value == "new";
		StateHasChanged();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (showAssignDialog && shouldFocusFirstName)
		{
			shouldFocusFirstName = false;
			await JS.InvokeVoidAsync("setFocus", firstNameInputRef);
		}
	}

	private async Task ConfirmAssignUserAsync()
	{
		showAssignDialog = false;
		if (pendingAssignTitle != null && !string.IsNullOrEmpty(pendingAssignUserId))
		{
			var userIdToSend = pendingAssignUserId == "null" ? null : pendingAssignUserId;
			await AssignUserOverride(pendingAssignTitle.Id, userIdToSend);
		}
		ResetAssignDialog();
	}

	private void CancelAssignDialog()
	{
		showAssignDialog = false;
		ResetAssignDialog();
	}

	private void ResetAssignDialog()
	{
		pendingAssignTitle = null;
		pendingAssignUserId = null;
		pendingAssignUserName = null;
		pendingAssignBoardPosition = null;
		newUserFirstName = "";
		newUserLastName = "";
		newUserEmail = "";
	}

	private async Task AddAndAssignNewUserAsync()
	{
		if (string.IsNullOrWhiteSpace(newUserFirstName) || string.IsNullOrWhiteSpace(newUserLastName) || string.IsNullOrWhiteSpace(newUserEmail))
		{
			return;
		}

		try
		{
			var newUser = new ApplicationUser
			{
				FirstName = newUserFirstName,
				LastName = newUserLastName,
				Email = newUserEmail,
				UserName = newUserEmail
			};

			var response = await Http.PostAsJsonAsync("api/users", newUser);
			if (response.IsSuccessStatusCode)
			{
				var createdUser = await response.Content.ReadFromJsonAsync<ApplicationUser>();
				if (pendingAssignTitle != null && createdUser?.Id != null)
				{
					await AssignUserOverride(pendingAssignTitle.Id, createdUser.Id);
				}
			}

			showAssignDialog = false;
			ResetAssignDialog();
		}
		catch (Exception)
		{
			// Handle error
		}
	}

	// Position Title Management Methods
	private void ShowAddTitleForm()
	{
		newPositionTitle = new BoardPositionTitle
		{
			RoleType = BoardRoleType.CommitteeChair,
			SortOrder = (requiredTitles?.Max(t => t.SortOrder) ?? 0) + 1
		};
		editingPositionTitle = null;
		showAddTitleForm = true;
		StateHasChanged();
	}

	private void CancelAddTitleForm()
	{
		showAddTitleForm = false;
		editingPositionTitle = null;
		newPositionTitle = new BoardPositionTitle();
		StateHasChanged();
	}

	private async Task SavePositionTitle()
	{
		try
		{
			HttpResponseMessage response;

			if (editingPositionTitle != null)
			{
				newPositionTitle.Id = editingPositionTitle.Id;
				newPositionTitle.SortOrder = editingPositionTitle.SortOrder;
				response = await Http.PutAsJsonAsync($"api/boardpositions/titles/{editingPositionTitle.Id}", newPositionTitle);
			}
			else
			{
				response = await Http.PostAsJsonAsync("api/boardpositions/titles", newPositionTitle);
			}

			if (response.IsSuccessStatusCode)
			{
				await LoadBoardPositionTitles();
				await LoadBoardPositionsAsync();
				CancelAddTitleForm();
			}
		}
		catch (Exception)
		{
			// Handle error
		}
	}

	private void EditPositionTitle(BoardPositionTitle title)
	{
		editingPositionTitle = title;
		newPositionTitle = new BoardPositionTitle
		{
			Id = title.Id,
			Title = title.Title,
			RoleType = title.RoleType,
			IsRequired = title.IsRequired,
			IsElected = title.IsElected,
			Description = title.Description
		};
		showAddTitleForm = true;
		StateHasChanged();
	}
}