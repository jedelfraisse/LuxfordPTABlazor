@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.Enums
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="card h-100">
	<div class="card-header text-black @(showOverride ? "bg-warning" : "")">
		<h5 class="mb-0">
			<i class="bi bi-person-circle"></i> Officers & Committee Chairs
			@if (showOverride)
			{
				<span class="badge bg-dark ms-2">Edit Mode</span>
			}
		</h5>
	</div>
	<div class="card-body">
		<p>Here are the assigned board officers and committee chairs for <strong>@SchoolYear?.Name</strong>:</p>
		
		<div class="row mb-3">
			<div class="col-md-6">
				<InputCheckbox @bind-Value="boardShowAllPositions" @onchange="OnBoardShowAllPositionsChanged"></InputCheckbox> Show All Positions
			</div>
		</div>
		
		<table class="table">
			<thead>
				<tr>
					<th>Title</th>
					<th>Assigned User</th>
					<th>Type</th>
					@if (boardShowAllPositions && CanSortPositions)
					{
						<th width="60">Sort</th>
					}
					@if (boardShowAllPositions && CanEditPositionTitles)
					{
						<th width="60">Edit</th>
					}
					@if (showOverride && CanAssignUsers)
					{
						<th>Action</th>
					}
				</tr>
			</thead>
			<tbody>
				@foreach (var pos in GetPositionsToDisplay())
				{
					var title = pos.BoardPositionTitle;
					<tr>
						<td>
							@title?.Title
							@if (title?.IsRequired == true)
							{
								<span class="text-warning ms-1" title="Required">
									<i class="bi bi-star-fill"></i>
								</span>
							}
							@if (boardShowAllPositions && title != null)
							{
								<small class="text-muted ms-2" title="Sort Order">#@title.SortOrder</small>
							}
						</td>
						<td>
							@if (pos.AssignedUser != null)
							{
								@pos.AssignedUser.FullName
							}
							else
							{
								<span class="text-danger">Unfilled</span>
							}
						</td>
						<td>
							@(title?.IsElected == true ? "Elected" : "Appointed")
						</td>
						@if (boardShowAllPositions && CanSortPositions)
						{
							<td>
								@if (title != null)
								{
									var canMoveUp = CanMoveUp(title);
									var canMoveDown = CanMoveDown(title);
									<div class="btn-group-vertical btn-group-sm">
										<button type="button" 
												class="btn btn-outline-secondary btn-sm @(!canMoveUp || isSorting ? "disabled" : "")" 
												title="Move Up" 
												disabled="@(!canMoveUp || isSorting)"
												@onclick="() => MoveTitleUp(title)">
											@if (isSorting)
											{
												<i class="bi bi-hourglass-split"></i>
											}
											else
											{
												<i class="bi bi-arrow-up"></i>
											}
										</button>
										<button type="button" 
												class="btn btn-outline-secondary btn-sm @(!canMoveDown || isSorting ? "disabled" : "")" 
												title="Move Down" 
												disabled="@(!canMoveDown || isSorting)"
												@onclick="() => MoveTitleDown(title)">
											@if (isSorting)
											{
												<i class="bi bi-hourglass-split"></i>
											}
											else
											{
												<i class="bi bi-arrow-down"></i>
											}
										</button>
									</div>
								}
							</td>
						}
						@if (boardShowAllPositions && CanEditPositionTitles)
						{
							<td>
								@if (title != null)
								{
									<button type="button" class="btn btn-outline-primary btn-sm" 
											title="Edit @title.Title" 
											@onclick="() => EditPositionTitle(title)">
										<i class="bi bi-pencil"></i>
									</button>
								}
							</td>
						}
						@if (showOverride && CanAssignUsers)
						{
							<td>
								<select @onchange="(e) => OnUserSelected(title, pos, e.Value?.ToString())">
									<option value="null">Unfilled</option>
									<option value="new">New User</option>
									@foreach (var user in AvailableUsers)
									{
										<option value="@user.Id" selected="@(pos?.UserId == user.Id)">
											@user.LastName, @user.FirstName
										</option>
									}
								</select>
							</td>
						}
					</tr>
				}
			</tbody>
		</table>
		
		<div class="row align-items-center">
			<div class="col">
				<p class="mb-0">
					<span class="text-warning ms-1" title="Required">
						<i class="bi bi-star-fill"></i>
					</span> Required Position
				</p>
			</div>
			<div class="col-auto">
				@if (CanAssignUsers && !showOverride)
				{
					<button class="btn btn-outline-danger btn-sm" @onclick="SwapOverride">
						<i class="bi bi-pencil"></i> Edit Assignments
					</button>
				}
				else if (showOverride && CanAssignUsers)
				{
					<button class="btn btn-outline-secondary btn-sm" @onclick="SwapOverride">
						<i class="bi bi-x"></i> Cancel Editing
					</button>
				}
				@if (boardShowAllPositions && CanAddNewPositionTitles)
				{
					<button class="btn btn-outline-success btn-sm ms-2" @onclick="ShowAddTitleForm">
						<i class="bi bi-plus-circle"></i> Add New Position Title
					</button>
				}
			</div>
		</div>

		<!-- Add/Edit Position Title Form -->
		@if (boardShowAllPositions && (showAddTitleForm || editingPositionTitle != null) && CanEditPositionTitles)
		{
			<div class="card mt-3 border-success">
				<div class="card-header bg-light">
					<h6 class="mb-0">
						<i class="bi bi-@(editingPositionTitle != null ? "pencil" : "plus-circle")"></i> 
						@(editingPositionTitle != null ? "Edit Position Title" : "Add New Position Title")
					</h6>
				</div>
				<div class="card-body">
					<EditForm Model="newPositionTitle" OnValidSubmit="SavePositionTitle">
						<DataAnnotationsValidator />
						<ValidationSummary class="text-danger" />
						
						<div class="row">
							<div class="col-md-6">
								<div class="mb-3">
									<label for="titleName" class="form-label">Position Title *</label>
									<InputText id="titleName" @bind-Value="newPositionTitle.Title" class="form-control" 
											   placeholder="e.g., Treasurer, Secretary" />
									<ValidationMessage For="() => newPositionTitle.Title" class="text-danger" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="roleType" class="form-label">Role Type *</label>
									<InputSelect id="roleType" @bind-Value="newPositionTitle.RoleType" class="form-select">
										<option value="@BoardRoleType.Officer">Officer</option>
										<option value="@BoardRoleType.CommitteeChair">Committee Chair</option>
										<option value="@BoardRoleType.ExOfficio">Ex-Officio</option>
										<option value="@BoardRoleType.MemberAtLarge">Member at Large</option>
									</InputSelect>
								</div>
							</div>
						</div>
						
						<div class="row">
							<div class="col-md-6">
								<div class="form-check mb-3">
									<InputCheckbox id="isRequired" @bind-Value="newPositionTitle.IsRequired" class="form-check-input" />
									<label for="isRequired" class="form-check-label">
										Required Position
									</label>
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-check mb-3">
									<InputCheckbox id="isElected" @bind-Value="newPositionTitle.IsElected" class="form-check-input" />
									<label for="isElected" class="form-check-label">
										Elected Position
									</label>
								</div>
							</div>
						</div>
						
						<div class="mb-3">
							<label for="description" class="form-label">Description</label>
							<InputTextArea id="description" @bind-Value="newPositionTitle.Description" class="form-control" 
										   rows="3" placeholder="Describe the responsibilities and duties of this position..." />
						</div>
						
						<div class="d-flex gap-2">
							<button type="submit" class="btn btn-success btn-sm">
								<i class="bi bi-check-circle"></i> 
								@(editingPositionTitle != null ? "Update" : "Create") Position
							</button>
							<button type="button" class="btn btn-secondary btn-sm" @onclick="CancelAddTitleForm">
								<i class="bi bi-x-circle"></i> Cancel
							</button>
						</div>
					</EditForm>
				</div>
			</div>
		}
	</div>
</div>

@code {
	[Parameter] public SchoolYear? SchoolYear { get; set; }
	[Parameter] public List<ApplicationUser> AvailableUsers { get; set; } = new();
	
	// Internal state
	private List<BoardPosition> boardPositions = new();
	private List<BoardPositionTitle> requiredTitles = new();
	private bool showOverride = false;
	private bool boardShowAllPositions = false;
	private BoardPositionTitle? pendingAssignTitle;
	private string? pendingAssignUserId;
	private string? pendingAssignUserName;
	private BoardPosition? pendingAssignBoardPosition;

	// Add/Edit Position Title fields
	private bool showAddTitleForm = false;
	private BoardPositionTitle? editingPositionTitle = null;
	private BoardPositionTitle newPositionTitle = new();
	private bool isSorting = false;

	// School Year Status Logic
	private bool CanEditPositionTitles => SchoolYear?.Status is SchoolYearStatus.FutureYear or SchoolYearStatus.CurrentYear;
	private bool CanSortPositions => SchoolYear?.Status is SchoolYearStatus.FutureYear or SchoolYearStatus.CurrentYear;
	private bool CanAssignUsers => SchoolYear?.Status is SchoolYearStatus.FutureYear or SchoolYearStatus.CurrentYear or SchoolYearStatus.Wrapup;
	private bool CanAddNewPositionTitles => SchoolYear?.Status is SchoolYearStatus.FutureYear;

	protected override async Task OnParametersSetAsync()
	{
		if (SchoolYear != null)
		{
			await LoadBoardPositionsAsync();
			await LoadBoardPositionTitles();
		}
	}

	private List<BoardPosition> GetPositionsToDisplay()
	{
		var filteredBoardPositions = boardPositions.Where(bp => bp.SchoolYearId == SchoolYear?.Id).ToList();
		
		if (boardShowAllPositions)
		{
			return filteredBoardPositions.OrderBy(bp => bp.BoardPositionTitle.SortOrder).ToList();
		}
		else
		{
			var actualRequiredIds = requiredTitles.Where(t => t.IsRequired).Select(t => t.Id).ToHashSet();
			var filledPositions = filteredBoardPositions.Where(bp => bp.AssignedUser != null).ToList();

			return requiredTitles
				.Where(t => t.IsRequired)
				.OrderBy(t => t.SortOrder)
				.Select(t => filteredBoardPositions.FirstOrDefault(bp => bp.BoardPositionTitleId == t.Id) ?? 
					new BoardPosition { BoardPositionTitle = t, BoardPositionTitleId = t.Id, SchoolYearId = SchoolYear?.Id ?? 0 })
				.Concat(filledPositions.Where(bp => !actualRequiredIds.Contains(bp.BoardPositionTitleId)))
				.OrderBy(bp => bp.BoardPositionTitle.SortOrder)
				.ToList();
		}
	}

	private async Task LoadBoardPositionsAsync()
	{
		if (SchoolYear == null) return;
		
		try
		{
			var freshPositions = await Http.GetFromJsonAsync<List<BoardPosition>>($"api/boardpositions/all-by-schoolyear/{SchoolYear.Id}") ?? new List<BoardPosition>();
			
			boardPositions.Clear();
			boardPositions.AddRange(freshPositions);
			
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading board positions: {ex.Message}");
			boardPositions = new List<BoardPosition>();
		}
	}

	private async Task LoadBoardPositionTitles()
	{
		try
		{
			var freshTitles = await Http.GetFromJsonAsync<List<BoardPositionTitle>>("api/boardpositions/titles") ?? new List<BoardPositionTitle>();
			
			requiredTitles.Clear();
			requiredTitles.AddRange(freshTitles.OrderBy(t => t.SortOrder));
			
			StateHasChanged();
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading board position titles: {ex.Message}");
			requiredTitles = new List<BoardPositionTitle>();
		}
	}

	private async Task OnBoardShowAllPositionsChanged(ChangeEventArgs e)
	{
		boardShowAllPositions = (bool)e.Value!;
		
		if (!boardShowAllPositions)
		{
			CancelAddTitleForm();
		}
		
		StateHasChanged();
	}

	private void SwapOverride()
	{
		showOverride = !showOverride;
	}

	private void OnUserSelected(BoardPositionTitle? title, BoardPosition? pos, string? value)
	{
		// User assignment logic would go here
		pendingAssignTitle = title;
		pendingAssignBoardPosition = pos;
		pendingAssignUserId = value;
	}

	// Position Title Management Methods
	private void ShowAddTitleForm()
	{
		newPositionTitle = new BoardPositionTitle
		{
			RoleType = BoardRoleType.CommitteeChair,
			SortOrder = (requiredTitles?.Any() == true ? requiredTitles.Max(t => t.SortOrder) : 0) + 1
		};
		editingPositionTitle = null;
		showAddTitleForm = true;
		StateHasChanged();
	}

	private void CancelAddTitleForm()
	{
		showAddTitleForm = false;
		editingPositionTitle = null;
		newPositionTitle = new BoardPositionTitle();
		StateHasChanged();
	}

	private async Task SavePositionTitle()
	{
		try
		{
			HttpResponseMessage response;

			if (editingPositionTitle != null)
			{
				newPositionTitle.Id = editingPositionTitle.Id;
				newPositionTitle.SortOrder = editingPositionTitle.SortOrder;
				response = await Http.PutAsJsonAsync($"api/boardpositions/titles/{editingPositionTitle.Id}", newPositionTitle);
			}
			else
			{
				response = await Http.PostAsJsonAsync("api/boardpositions/titles", newPositionTitle);
			}

			if (response.IsSuccessStatusCode)
			{
				await LoadBoardPositionTitles();
				await LoadBoardPositionsAsync();
				CancelAddTitleForm();
			}
		}
		catch (Exception)
		{
			// Handle error
		}
	}

	private void EditPositionTitle(BoardPositionTitle title)
	{
		editingPositionTitle = title;
		newPositionTitle = new BoardPositionTitle
		{
			Id = title.Id,
			Title = title.Title,
			RoleType = title.RoleType,
			IsRequired = title.IsRequired,
			IsElected = title.IsElected,
			Description = title.Description
		};
		showAddTitleForm = true;
		StateHasChanged();
	}

	// Sort Order Management Methods
	private bool CanMoveUp(BoardPositionTitle title)
	{
		var sortedTitles = requiredTitles.OrderBy(t => t.SortOrder).ToList();
		var currentIndex = sortedTitles.FindIndex(t => t.Id == title.Id);
		return currentIndex > 0;
	}

	private bool CanMoveDown(BoardPositionTitle title)
	{
		var sortedTitles = requiredTitles.OrderBy(t => t.SortOrder).ToList();
		var currentIndex = sortedTitles.FindIndex(t => t.Id == title.Id);
		return currentIndex >= 0 && currentIndex < sortedTitles.Count - 1;
	}

	private async Task MoveTitleUp(BoardPositionTitle title)
	{
		await SwapSortOrders(title, moveUp: true);
	}

	private async Task MoveTitleDown(BoardPositionTitle title)
	{
		await SwapSortOrders(title, moveUp: false);
	}

	private async Task SwapSortOrders(BoardPositionTitle title, bool moveUp)
	{
		if (isSorting) return;
		
		try
		{
			isSorting = true;
			StateHasChanged();

			var sortedTitles = requiredTitles.OrderBy(t => t.SortOrder).ToList();
			var currentIndex = sortedTitles.FindIndex(t => t.Id == title.Id);
			
			if (currentIndex < 0) return;

			var targetIndex = moveUp ? currentIndex - 1 : currentIndex + 1;
			if (targetIndex < 0 || targetIndex >= sortedTitles.Count) return;

			var currentTitle = sortedTitles[currentIndex];
			var targetTitle = sortedTitles[targetIndex];

			// Store original values for rollback
			var originalCurrentSort = currentTitle.SortOrder;
			var originalTargetSort = targetTitle.SortOrder;

			// Swap sort order values
			(currentTitle.SortOrder, targetTitle.SortOrder) = (targetTitle.SortOrder, currentTitle.SortOrder);

			// Update both on server
			var updateCurrent = Http.PutAsJsonAsync($"api/boardpositions/titles/{currentTitle.Id}", currentTitle);
			var updateTarget = Http.PutAsJsonAsync($"api/boardpositions/titles/{targetTitle.Id}", targetTitle);

			var responses = await Task.WhenAll(updateCurrent, updateTarget);

			if (responses.All(r => r.IsSuccessStatusCode))
			{
				// Success - reload data to ensure UI reflects server state
				await LoadBoardPositionTitles();
				await LoadBoardPositionsAsync();
			}
			else
			{
				// Failure - revert local changes
				currentTitle.SortOrder = originalCurrentSort;
				targetTitle.SortOrder = originalTargetSort;
			}
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during sort operation: {ex.Message}");
		}
		finally
		{
			isSorting = false;
			StateHasChanged();
		}
	}
}