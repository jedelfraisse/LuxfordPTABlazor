@page "/admin/events"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin,BoardMember")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.DTOs
@using LuxfordPTAWeb.Shared.Enums
@using Microsoft.AspNetCore.WebUtilities
@inherits ComponentBase

<PageTitle>Manage Events</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
	<h1><i class="bi bi-calendar-event"></i> Manage Events</h1>
	<div>
		<a href="/admin" class="btn btn-outline-secondary me-2">
			<i class="bi bi-arrow-left"></i> Back to Dashboard
		</a>
		<a href="/admin/event-categories" class="btn btn-outline-info me-2">
			<i class="bi bi-tags"></i> Event Categories
		</a>
		<a href="@GetCreateEventUrl()" class="btn btn-primary">
			<i class="bi bi-plus"></i> Add New Event
		</a>
	</div>
</div>

<!-- Combined Filters Card -->
<div class="card mb-4">
	<div class="card-header">
		<h6 class="mb-0"><i class="bi bi-funnel"></i> Filter Events</h6>
	</div>
	<div class="card-body">


		<!-- Advanced Filters -->
		<div class="row align-items-end">
			<div class="col-md-2">
				<label for="schoolYearFilter" class="form-label">School Year</label>
				<select id="schoolYearFilter" class="form-select" @onchange="FilterBySchoolYear">
					<option value="0">All School Years</option>
					@if (schoolYears != null)
					{
						@foreach (var year in schoolYears)
						{
							<option value="@year.Id" selected="@(selectedSchoolYearId == year.Id)">
								@year.Name
								@if (year.Status == LuxfordPTAWeb.Shared.Enums.SchoolYearStatus.CurrentYear)
								{
									@: (Current)
								}
								@if (!year.IsVisibleToPublic)
								{
									@: [Hidden from Public]
								}
							</option>
						}
					}
				</select>
			</div>
			<div class="col-md-2">
				<label for="eventCatFilter" class="form-label">Event Category</label>
				<select id="eventCatFilter" class="form-select" @onchange="FilterByEventCat">
					<option value="0">All Categories</option>
					@if (eventCats != null)
					{
						@foreach (var eventCat in eventCats)
						{
							<option value="@eventCat.Id" selected="@(selectedEventCatId == eventCat.Id)">
								@eventCat.Name
							</option>
						}
					}
				</select>
			</div>
			<div class="col-md-2">
				<label for="eventSubCatFilter" class="form-label">Sub Category</label>
				<select id="eventSubCatFilter" class="form-select" @onchange="FilterByEventSubCat" disabled="@(selectedEventCatId == 0)">
					<option value="0">All Sub Categories</option>
					@if (availableSubCats != null)
					{
						@foreach (var subCat in availableSubCats)
						{
							<option value="@subCat.Id" selected="@(selectedEventSubCatId == subCat.Id)">
								@subCat.Name
							</option>
						}
					}
				</select>
			</div>
			<div class="col-md-3">
				<div class="d-flex align-items-center gap-2">
					<button type="button" class="btn btn-outline-secondary" @onclick="ClearFilters">
						<i class="bi bi-x-circle"></i> Clear Filters
					</button>
					<button type="button" class="btn btn-outline-info" @onclick="ShowCurrentYear">
						<i class="bi bi-calendar-check"></i> Current Year
					</button>
				</div>
			</div>
			<div class="col-md-3 text-end">
				<span class="text-muted">
					Showing @(filteredEvents?.Count ?? 0) of @(allEvents?.Count ?? 0) events
				</span>
				@if (selectedSchoolYear != null)
				{
					<div class="small text-primary">@selectedSchoolYear.Name</div>
				}
			</div>
		</div>
		<!-- Quick Filter Buttons -->
		@if (eventSummary != null)
		{
			<hr />
			<div class="mb-3">
				<h6 class="mb-2">Quick Filters</h6>
				<div class="btn-group flex-wrap" role="group">
					<button type="button" class="btn @(selectedQuickFilter == "all" ? "btn-primary" : "btn-outline-primary")" @onclick="@(() => SetQuickFilter("all"))">
						All (@eventSummary.TotalEvents)
					</button>
					@if (eventSummary.PendingApproval > 0)
					{
						<button type="button" class="btn @(selectedQuickFilter == "pending" ? "btn-warning" : "btn-outline-warning")" @onclick="@(() => SetQuickFilter("pending"))">
							Pending Approval (@eventSummary.PendingApproval)
						</button>
					}
					@if (eventSummary.RequiringVolunteers > 0)
					{
						<button type="button" class="btn @(selectedQuickFilter == "volunteers" ? "btn-info" : "btn-outline-info")" @onclick="@(() => SetQuickFilter("volunteers"))">
							Need Volunteers (@eventSummary.RequiringVolunteers)
						</button>
					}
					@if (eventSummary.UpcomingNext30Days > 0)
					{
						<button type="button" class="btn @(selectedQuickFilter == "upcoming" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetQuickFilter("upcoming"))">
							Upcoming (@eventSummary.UpcomingNext30Days)
						</button>
					}
					<button type="button" class="btn @(selectedQuickFilter == "active" ? "btn-success" : "btn-outline-success")" @onclick="@(() => SetQuickFilter("active"))">
						Active (@eventSummary.ActiveEvents)
					</button>
					<button type="button" class="btn @(selectedQuickFilter == "planning" ? "btn-secondary" : "btn-outline-secondary")" @onclick="@(() => SetQuickFilter("planning"))">
						Planning (@eventSummary.PlanningEvents)
					</button>
				</div>
			</div>

		}
	</div>
</div>

@if (filteredEvents == null)
{
	<div class="alert alert-info">
		<em>Loading events...</em>
	</div>
}
else if (!filteredEvents.Any())
{
	<div class="alert alert-warning">
		<em>No events found @(GetFilterDescription()).</em>
	</div>
}
else
{
	<div class="table-responsive">
		<table class="table table-striped">
			<thead class="table-dark">
				<tr>
					<th>Title</th>
					<th>Status</th>
					<th>School Year</th>
					<th>Event Category</th>
					<th>Sub Category</th>
					<th>Date</th>
					<th>Location</th>
					<th>Coordinator</th>
					<th>Actions</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var evt in filteredEvents.OrderBy(e => e.Date))
				{
					<tr class="@(evt.Date < DateTime.Now ? "table-secondary" : "")">
						<td>
							<strong>@evt.Title</strong>
							@if (evt.EventDays != null && evt.EventDays.Count > 1)
							{
								<span class="badge bg-info ms-2">Multi-Day (@evt.EventDays.Count days)</span>
							}
							@if (evt.Date < DateTime.Now)
							{
								<span class="badge bg-secondary ms-2">Past</span>
							}
							else if (evt.Date <= DateTime.Now.AddDays(7))
							{
								<span class="badge bg-warning ms-2">Soon</span>
							}
							@if (evt.RequiresVolunteers && string.IsNullOrEmpty(evt.ExcelImportId))
							{
								<span class="badge bg-info ms-2">Volunteers Needed</span>
							}
						</td>
						<td>
							<span class="badge @GetStatusBadgeClass(evt.Status)">
								@evt.Status.ToString().Replace("SubmittedForApproval", "Pending Approval")
							</span>
						</td>
						<td>
							<span class="badge @(evt.SchoolYear?.Status == LuxfordPTAWeb.Shared.Enums.SchoolYearStatus.CurrentYear ? "bg-success" : "bg-light text-dark")">
								@evt.SchoolYear?.Name
							</span>
						</td>
						<td>
							<span class="badge">@evt.EventCat?.Name</span>
						</td>
						<td>
							@if (evt.EventCatSub != null)
							{
								<span class="badge bg-light text-dark">@evt.EventCatSub.Name</span>
							}
							else
							{
								<span class="text-muted">-</span>
							}
						</td>
						<td>
							@evt.Date.ToString("MMM d, yyyy")
							@if (evt.EventDays != null && evt.EventDays.Count > 1 && evt.EventDays.Any())
							{
								var endDate = evt.EventDays.Max(d => d.Date);
								if (endDate != evt.Date)
								{
									<br>
									<small class="text-muted">to @endDate.ToString("MMM d, yyyy")</small>
								}
							}
						</td>
						<td>@evt.Location</td>
						<td>
							@if (evt.EventCoordinator != null)
							{
								@evt.EventCoordinator.FirstName @evt.EventCoordinator.LastName
							}
							else
							{
								<span class="text-muted">Unassigned</span>
							}
						</td>
						<td>
							<div class="btn-group btn-group-sm">
								<a href="/admin/events/edit/@evt.Id" class="btn btn-outline-primary" title="Edit">
									<i class="bi bi-pencil"></i>
								</a>
								@if (evt.Status == EventStatus.SubmittedForApproval)
								{
									<button type="button" class="btn btn-outline-success" title="Approve" @onclick="@(() => ApproveEvent(evt.Id))">
										<i class="bi bi-check-circle"></i>
									</button>
								}
								<button type="button" class="btn btn-outline-danger" title="Delete" @onclick="@(() => DeleteEvent(evt.Id))">
									<i class="bi bi-trash"></i>
								</button>
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}