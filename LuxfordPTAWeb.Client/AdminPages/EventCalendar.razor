@page "/admin/events/calendar"
@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.Enums
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin,BoardMember")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LuxfordPTAWeb.Client.Code.SchoolYearSupport SchoolYearSupport

<style>
    .event-card {
        transition: all 0.2s ease;
        cursor: default;
    }
    .event-card:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.15);
        transform: translateY(-1px);
    }
    .month-card {
        transition: all 0.3s ease;
    }
    .month-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .event-actions {
        opacity: 0.7;
        transition: opacity 0.2s ease;
    }
    .event-card:hover .event-actions {
        opacity: 1;
    }
</style>

<PageTitle>Event Calendar</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-calendar-month"></i> Event Calendar</h1>
    <div>
        <a href="/admin" class="btn btn-outline-secondary me-2">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
        <a href="/admin/events" class="btn btn-outline-primary me-2">
            <i class="bi bi-list"></i> List View
        </a>
        <a href="/admin/events/create" class="btn btn-primary">
            <i class="bi bi-plus"></i> Add Event
        </a>
    </div>
</div>

<!-- School Year and Summary Info -->
@if (selectedSchoolYear != null)
{
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="alert alert-info mb-3">
                <h6><i class="bi bi-calendar-check"></i> @selectedSchoolYear.Name School Year</h6>
                <p class="mb-0">@selectedSchoolYear.StartDate.ToString("MMMM yyyy") - @selectedSchoolYear.EndDate.ToString("MMMM yyyy")</p>
            </div>
        </div>
        <div class="col-md-4">
            @if (eventSummary != null)
            {
                <div class="card">
                    <div class="card-body p-3">
                        <div class="row text-center">
                            <div class="col-6">
                                <h6 class="text-primary mb-1">@eventSummary.TotalEvents</h6>
                                <small class="text-muted">Total Events</small>
                            </div>
                            <div class="col-6">
                                <h6 class="text-success mb-1">@eventSummary.ActiveEvents</h6>
                                <small class="text-muted">Active</small>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Full Year Calendar Grid -->
    <div class="row g-3">
        @foreach (var month in GetSchoolYearMonths())
        {
            var monthEvents = GetEventsForMonth(month.Year, month.Month);
            <div class="col-lg-4 col-md-6">
                <div class="card h-100 month-card @(IsCurrentMonth(month) ? "border-primary border-2" : "")">
                    <div class="card-header @(IsCurrentMonth(month) ? "bg-primary text-white" : "bg-light")">
                        <h6 class="mb-0">
                            <i class="bi bi-calendar3 me-2"></i>
                            @month.ToString("MMMM yyyy")
                            <span class="badge @(IsCurrentMonth(month) ? "bg-light text-primary" : "bg-primary text-white") float-end">
                                @monthEvents.Count()
                            </span>
                        </h6>
                    </div>
                    <div class="card-body p-2" style="min-height: 200px;">
                        @if (monthEvents.Any())
                        {
                            @foreach (var evt in monthEvents.OrderBy(e => e.Date))
                            {
                                <div class="mb-2 p-2 rounded event-card" 
                                     style="border-left: 4px solid @GetEventStatusBorderColor(evt.Status); background-color: @GetEventStatusBackground(evt.Status);">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <div class="fw-bold small">@evt.Title</div>
                                            <div class="text-muted small">
                                                <i class="bi bi-calendar-date me-1"></i>
                                                @evt.Date.ToString("MMM d, yyyy")
                                            </div>
                                            @if (!string.IsNullOrEmpty(evt.Location))
                                            {
                                                <div class="text-muted small">
                                                    <i class="bi bi-geo-alt me-1"></i>
                                                    @TruncateText(evt.Location, 20)
                                                </div>
                                            }
                                        </div>
                                        <div class="ms-2 event-actions">
                                            <span class="badge @GetEventStatusColor(evt.Status)">
                                                @evt.Status.ToString().Replace("SubmittedForApproval", "Pending")
                                            </span>
                                            <div class="btn-group-vertical btn-group-sm mt-1 event-actions">
                                                <a href="/admin/events/edit/@evt.Id" class="btn btn-outline-primary btn-sm" title="Edit">
                                                    <i class="bi bi-pencil"></i>
                                                </a>
                                                @if (evt.Status == EventStatus.SubmittedForApproval)
                                                {
                                                    <button type="button" class="btn btn-success btn-sm" title="Approve" @onclick="() => ApproveEvent(evt.Id)">
                                                        <i class="bi bi-check"></i>
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center text-muted py-4">
                                <i class="bi bi-calendar-x display-6"></i>
                                <p class="small mt-2">No events this month</p>
                                <a href="/admin/events/create" class="btn btn-sm btn-outline-primary">
                                    <i class="bi bi-plus"></i> Add Event
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-warning">
        <h6><i class="bi bi-calendar-x"></i> No School Year Selected</h6>
        <p>Please select a school year to view the event calendar.</p>
        <a href="/admin/school-years" class="btn btn-outline-warning">
            <i class="bi bi-calendar3"></i> Manage School Years
        </a>
    </div>
}

@code {
    private SchoolYear? selectedSchoolYear;
    private List<Event>? allEvents;
    private EventDashboardSummary? eventSummary;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            selectedSchoolYear = await SchoolYearSupport.GetSelectedSchoolYearInfoAsync();
            
            if (selectedSchoolYear != null)
            {
                await LoadEvents();
                await LoadEventSummary();
            }
        }
        catch (Exception)
        {
            // Handle errors silently for now
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            if (selectedSchoolYear == null) return;
            allEvents = await Http.GetFromJsonAsync<List<Event>>($"api/events/all-admin?schoolYearId={selectedSchoolYear.Id}");
        }
        catch (Exception)
        {
            allEvents = new List<Event>();
        }
    }

    private async Task LoadEventSummary()
    {
        try
        {
            if (selectedSchoolYear == null) return;
            eventSummary = await Http.GetFromJsonAsync<EventDashboardSummary>($"api/events/dashboard-summary/{selectedSchoolYear.Id}");
        }
        catch (Exception)
        {
            // Handle errors silently
        }
    }

    private List<DateTime> GetSchoolYearMonths()
    {
        if (selectedSchoolYear == null) return new List<DateTime>();
        
        var months = new List<DateTime>();
        var current = new DateTime(selectedSchoolYear.StartDate.Year, selectedSchoolYear.StartDate.Month, 1);
        var end = new DateTime(selectedSchoolYear.EndDate.Year, selectedSchoolYear.EndDate.Month, 1);
        
        while (current <= end)
        {
            months.Add(current);
            current = current.AddMonths(1);
        }
        
        return months;
    }

    private List<Event> GetEventsForMonth(int year, int month)
    {
        if (allEvents == null) return new List<Event>();
        
        return allEvents
            .Where(e => e.Date.Year == year && e.Date.Month == month)
            .OrderBy(e => e.Date)
            .ToList();
    }

    private bool IsCurrentMonth(DateTime month)
    {
        var now = DateTime.Now;
        return month.Year == now.Year && month.Month == now.Month;
    }

    private string GetEventStatusColor(EventStatus status) => status switch
    {
        EventStatus.Planning => "bg-secondary",
        EventStatus.SubmittedForApproval => "bg-warning",
        EventStatus.Active => "bg-success",
        EventStatus.InProgress => "bg-primary",
        EventStatus.WrapUp => "bg-info",
        EventStatus.Completed => "bg-dark",
        EventStatus.Cancelled => "bg-danger",
        _ => "bg-light text-dark"
    };

    private string GetEventStatusBorderColor(EventStatus status) => status switch
    {
        EventStatus.Planning => "#6c757d",
        EventStatus.SubmittedForApproval => "#ffc107",
        EventStatus.Active => "#198754",
        EventStatus.InProgress => "#0d6efd",
        EventStatus.WrapUp => "#0dcaf0",
        EventStatus.Completed => "#212529",
        EventStatus.Cancelled => "#dc3545",
        _ => "#e9ecef"
    };

    private string GetEventStatusBackground(EventStatus status) => status switch
    {
        EventStatus.Planning => "#f8f9fa",
        EventStatus.SubmittedForApproval => "#fff3cd",
        EventStatus.Active => "#d1e7dd",
        EventStatus.InProgress => "#cfe2ff",
        EventStatus.WrapUp => "#cff4fc",
        EventStatus.Completed => "#e9ecef",
        EventStatus.Cancelled => "#f8d7da",
        _ => "#ffffff"
    };

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        return text.Substring(0, maxLength - 3) + "...";
    }

    private async Task ApproveEvent(int eventId)
    {
        try
        {
            var response = await Http.PostAsync($"api/events/{eventId}/approve", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadEvents();
                await LoadEventSummary();
            }
        }
        catch (Exception)
        {
            // Handle errors
        }
    }
}