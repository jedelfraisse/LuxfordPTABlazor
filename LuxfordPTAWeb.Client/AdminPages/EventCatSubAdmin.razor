@page "/admin/event-categories"
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin,BoardMember")]
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<PageTitle>Manage Event Categories</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-tags"></i> Manage Event Categories</h1>
    <div>
        <a href="/admin/events" class="btn btn-outline-secondary me-2">
            <i class="bi bi-arrow-left"></i> Back to Events
        </a>
        <button type="button" class="btn btn-primary" @onclick="ShowCreateForm">
            <i class="bi bi-plus"></i> Add New Event Category
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}

<!-- Create/Edit Form -->
@if (showForm)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">@(editingEventCat?.Id > 0 ? "Edit" : "Create") Event Category</h5>
        </div>
        <div class="card-body">
            <EditForm Model="editingEventCat" OnValidSubmit="SaveEventCategory">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name *</label>
                            <InputText id="name" @bind-Value="editingEventCat.Name" @onblur="GenerateSlugFromName" class="form-control" maxlength="100" />
                            <ValidationMessage For="() => editingEventCat.Name" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="slug" class="form-label">URL Slug *</label>
                            <InputText id="slug" @bind-Value="editingEventCat.Slug" class="form-control" maxlength="100" />
                            <ValidationMessage For="() => editingEventCat.Slug" class="text-danger" />
                            <div class="form-text">Used in URLs: /events/category/<strong>@(editingEventCat.Slug ?? "slug")</strong></div>
                        </div>
                    </div>
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" @bind-Value="editingEventCat.Description" class="form-control" rows="3" maxlength="500" />
                    <ValidationMessage For="() => editingEventCat.Description" class="text-danger" />
                    <div class="form-text">Description shown on event category cards</div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="icon" class="form-label">Icon Class</label>
                            <InputText id="icon" @bind-Value="editingEventCat.Icon" class="form-control" placeholder="bi-calendar-event" />
                            <ValidationMessage For="() => editingEventCat.Icon" class="text-danger" />
                            <div class="form-text">Bootstrap Icons class (e.g., bi-calendar-event)</div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="colorClass" class="form-label">Color Class</label>
                            <InputSelect id="colorClass" @bind-Value="editingEventCat.ColorClass" class="form-select">
                                <option value="">Default</option>
                                <option value="text-primary">Blue</option>
                                <option value="text-success">Green</option>
                                <option value="text-danger">Red</option>
                                <option value="text-warning">Yellow</option>
                                <option value="text-info">Cyan</option>
                                <option value="text-secondary">Gray</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="size" class="form-label">Card Size</label>
                            <InputSelect id="size" @bind-Value="editingEventCat.Size" class="form-select">
                                <option value="0">Half Size</option>
                                <option value="1">Full Size</option>
                            </InputSelect>
                            <div class="form-text">Half size: 2 per row, Full size: 1 per row</div>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check mb-3 d-flex align-items-center" style="height: 38px;">
                            <InputCheckbox id="isActive" @bind-Value="editingEventCat.IsActive" class="form-check-input" />
                            <label for="isActive" class="form-check-label">
                                Active
                                <small class="text-muted d-block">Inactive categories are hidden from public view</small>
                            </label>
                        </div>
                    </div>
                </div>
                <!-- Sub-categories card -->
                @if (editingEventCat.Id > 0)
                {
                    <div class="card border-info mb-4">
                        <div class="card-header bg-info text-white">
                            <h6 class="mb-0">Sub-Categories</h6>
                        </div>
                        <div class="card-body">
                            @if (subCategories == null)
                            {
                                <div class="text-muted">Loading sub-categories...</div>
                            }
                            else
                            {
                                <div class="mb-3">
                                    <!-- Sub-category list -->
                                    @foreach (var subcat in subCategories.OrderBy(sc => sc.DisplayOrder))
                                    {
                                        <div class="d-flex align-items-center mb-2 border rounded p-2 bg-light">
                                            <div class="flex-grow-1">
                                                <strong>@subcat.Name</strong>
                                                <div class="text-muted small">@subcat.Description</div>
                                                <span class="badge @(subcat.IsActive ? "bg-success" : "bg-secondary")">
                                                    @(subcat.IsActive ? "Active" : "Inactive")
                                                </span>
                                            </div>
                                            <div class="btn-group ms-2">
                                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => MoveUp(subcat.Id)" disabled="@showSubcatModal">↑</button>
                                                <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => MoveDown(subcat.Id)" disabled="@showSubcatModal">↓</button>
                                                <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="() => EditSubcat(subcat)" disabled="@showSubcatModal">Edit</button>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => AddSubCategory(editingEventCat.Id)">
                                        <i class="bi bi-plus"></i> Add Sub-Category
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                }
                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-check-circle me-1"></i>
                        Save Event Category
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="CancelForm">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (eventCategories == null)
{
    <div class="alert alert-info">
        <em>Loading event categories...</em>
    </div>
}
else if (!eventCategories.Any())
{
    <div class="alert alert-warning">
        <em>No event categories found. Create your first event category above!</em>
    </div>
}
else
{
    <!-- Responsive Event Categories Card Layout -->
    <div class="row g-3">
        @foreach (var eventCat in eventCategories.OrderBy(et => et.DisplayOrder))
        {
            var colClass = eventCat.Size == 1 ? "col-12" : "col-md-6 col-12";
            <div class="@colClass">
                <div class="card h-100">
                    <div class="card-header d-flex align-items-center justify-content-between">
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrEmpty(eventCat.Icon))
                            {
                                <i class="@eventCat.Icon @eventCat.ColorClass me-2" style="font-size: 1.5rem;"></i>
                            }
                            <strong>@eventCat.Name</strong>
                            @if (!eventCat.IsActive)
                            {
                                <span class="badge bg-secondary ms-2">Inactive</span>
                            }
                        </div>
                        <span class="badge @(eventCat.Size == 1 ? "bg-primary" : "bg-info")">@(eventCat.Size == 1 ? "Full" : "Half")</span>
                    </div>
                    <div class="card-body">
                        <div class="mb-2 text-muted small">@TruncateText(eventCat.Description, 120)</div>
                        <div class="mb-2">
                            <span class="badge @(eventCat.IsActive ? "bg-success" : "bg-secondary")">
                                @(eventCat.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                        <div class="mb-2">
                            <span class="text-muted">Events: @GetEventCount(eventCat.Id)</span>
                        </div>
                    </div>
                    <div class="card-footer d-flex justify-content-end gap-2">
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary btn-sm" title="Move Up" @onclick="() => MoveEventCategoryUp(eventCat.Id)" disabled="@(!CanMoveUp(eventCat) || isReordering)">
                                <i class="bi bi-chevron-up"></i>
                            </button>
                            <button type="button" class="btn btn-outline-secondary btn-sm" title="Move Down" @onclick="() => MoveEventCategoryDown(eventCat.Id)" disabled="@(!CanMoveDown(eventCat) || isReordering)">
                                <i class="bi bi-chevron-down"></i>
                            </button>
                        </div>
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="() => EditEventCategory(eventCat)">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => DeleteEventCategory(eventCat.Id)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
}

<!-- Modal for editing sub-category -->
@if (showSubcatModal)
{
    <div class="modal-backdrop show"></div>
    <div class="modal show d-block" tabindex="-1" style="background:rgba(0,0,0,0.2);">
        <div class="modal-dialog modal-dialog-centered" style="max-width:500px;">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Sub-Category</h5>
                    <button type="button" class="btn-close" @onclick="CloseSubcatModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editModel" OnValidSubmit="SaveEdit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label class="form-label">Name</label>
                            <input class="form-control" @bind="editModel.Name" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" @bind="editModel.Description" rows="2"></textarea>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Icon Class</label>
                                    <input class="form-control" @bind="editModel.Icon" placeholder="bi-flag" />
                                    <div class="form-text">Bootstrap Icons class</div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label class="form-label">Color Class</label>
                                    <select class="form-select" @bind="editModel.ColorClass">
                                        <option value="">Default</option>
                                        <option value="text-primary">Blue</option>
                                        <option value="text-success">Green</option>
                                        <option value="text-danger">Red</option>
                                        <option value="text-warning">Yellow</option>
                                        <option value="text-info">Cyan</option>
                                        <option value="text-secondary">Gray</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="subcatActive" @bind="editModel.IsActive" />
                            <label for="subcatActive" class="form-check-label">Active</label>
                        </div>
                        <div class="d-flex gap-2">
                            <button type="submit" class="btn btn-success">Save</button>
                            <button type="button" class="btn btn-secondary" @onclick="CloseSubcatModal">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<EventCatDto>? eventCategories;
    private List<EventDto>? events;
    private CreateEventCatDto editingEventCat = new();
    private bool showForm = false;
    private bool isSaving = false;
    private bool isReordering = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private List<EventCatSubDto>? subCategories;
    private int? editingSubcatId = null;
    private EventCatSubDto editModel = new();
    private bool showSubcatModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadEventCategories();
        await LoadEvents();
    }

    private async Task LoadEventCategories()
    {
        try
        {
            eventCategories = await Http.GetFromJsonAsync<List<EventCatDto>>("api/eventcat");
        }
        catch (Exception ex)
        {
            eventCategories = new List<EventCatDto>();
            errorMessage = $"Error loading event categories: {ex.Message}";
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            events = await Http.GetFromJsonAsync<List<EventDto>>("api/events");
        }
        catch (Exception)
        {
            events = new List<EventDto>();
        }
    }

    private bool CanMoveUp(EventCatDto eventCat)
    {
        if (eventCategories == null) return false;
        return eventCategories.OrderBy(et => et.DisplayOrder).First().Id != eventCat.Id;
    }

    private bool CanMoveDown(EventCatDto eventCat)
    {
        if (eventCategories == null) return false;
        return eventCategories.OrderBy(et => et.DisplayOrder).Last().Id != eventCat.Id;
    }

    private async Task MoveEventCategoryUp(int id)
    {
        isReordering = true;
        try
        {
            var response = await Http.PostAsync($"api/eventcat/{id}/move-up", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadEventCategories();
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to reorder event category.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error reordering event category: {ex.Message}";
        }
        finally
        {
            isReordering = false;
        }
    }

    private async Task MoveEventCategoryDown(int id)
    {
        isReordering = true;
        try
        {
            var response = await Http.PostAsync($"api/eventcat/{id}/move-down", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadEventCategories();
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to reorder event category.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error reordering event category: {ex.Message}";
        }
        finally
        {
            isReordering = false;
        }
    }

    private void ShowCreateForm()
    {
        var nextOrder = eventCategories?.Any() == true ? eventCategories.Max(et => et.DisplayOrder) + 1 : 0;
        editingEventCat = new CreateEventCatDto
        {
            DisplayOrder = nextOrder,
            IsActive = true,
            Size = 1
        };
        showForm = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        subCategories = new List<EventCatSubDto>();
    }

    private async void EditEventCategory(EventCatDto eventCat)
    {
        editingEventCat = new CreateEventCatDto
        {
            Id = eventCat.Id,
            Name = eventCat.Name,
            Description = eventCat.Description,
            DisplayOrder = eventCat.DisplayOrder,
            IsActive = eventCat.IsActive,
            Size = eventCat.Size,
            Icon = eventCat.Icon,
            ColorClass = eventCat.ColorClass,
            Slug = eventCat.Slug
        };
        showForm = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        _ = LoadSubCategories(eventCat.Id);
        await JS.InvokeVoidAsync("scrollToEditForm");
    }

    private void CancelForm()
    {
        showForm = false;
        editingEventCat = new CreateEventCatDto();
        subCategories = new List<EventCatSubDto>();
    }

    private async Task SaveEventCategory()
    {
        isSaving = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        try
        {
            HttpResponseMessage response;
            if (editingEventCat.Id > 0)
            {
                response = await Http.PutAsJsonAsync($"api/eventcat/{editingEventCat.Id}", editingEventCat);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Event category updated successfully!";
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/eventcat", editingEventCat);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Event category created successfully!";
                }
            }
            if (response.IsSuccessStatusCode)
            {
                showForm = false;
                await LoadEventCategories();
                editingEventCat = new CreateEventCatDto();
                subCategories = new List<EventCatSubDto>();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error saving event category: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving event category: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteEventCategory(int id)
    {
        if (!await ConfirmDelete()) return;
        try
        {
            var response = await Http.DeleteAsync($"api/eventcat/{id}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Event category deleted successfully!";
                await LoadEventCategories();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error deleting event category: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting event category: {ex.Message}";
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true);
    }

    private int GetEventCount(int eventCatId)
    {
        return events?.Count(e => e.EventCat?.Id == eventCatId) ?? 0;
    }

    private string TruncateText(string text, int maxLength)
    {
        if (string.IsNullOrEmpty(text) || text.Length <= maxLength)
            return text;
        return text.Substring(0, maxLength - 3) + "...";
    }

    private void GenerateSlugFromName()
    {
        if (!string.IsNullOrEmpty(editingEventCat.Name) && string.IsNullOrEmpty(editingEventCat.Slug))
        {
            editingEventCat.Slug = GenerateSlug(editingEventCat.Name);
        }
    }

    private string GenerateSlug(string name)
    {
        if (string.IsNullOrEmpty(name))
            return string.Empty;
        return name.ToLowerInvariant()
                   .Replace(" ", "-")
                   .Replace("&", "and")
                   .Replace("/", "-")
                   .Replace("'", "")
                   .Replace("\"", "")
                   .Where(c => char.IsLetterOrDigit(c) || c == '-')
                   .Aggregate("", (current, c) => current + c);
    }

    private async Task LoadSubCategories(int eventCatId)
    {
        try
        {
            subCategories = await Http.GetFromJsonAsync<List<EventCatSubDto>>($"api/eventcatsub?eventCatId={eventCatId}");
        }
        catch
        {
            subCategories = new List<EventCatSubDto>();
        }
        StateHasChanged();
    }

    private async Task SaveSubCategory(EventCatSubDto subCat)
    {
        if (subCat.Id > 0)
        {
            await Http.PutAsJsonAsync($"api/eventcatsub/{subCat.Id}", subCat);
        }
        else
        {
            await Http.PostAsJsonAsync("api/eventcatsub", subCat);
        }
    await LoadSubCategories(subCat.EventCatId);
    }

    private async Task DeleteSubCategory(int subCatId)
    {
        await Http.DeleteAsync($"api/eventcatsub/{subCatId}");
        if (editingEventCat.Id > 0)
            await LoadSubCategories(editingEventCat.Id);
    }

    private void AddSubCategory(int eventCatId)
    {
        if (subCategories == null) subCategories = new List<EventCatSubDto>();
    subCategories.Add(new EventCatSubDto { EventCatId = eventCatId, Name = "", DisplayOrder = subCategories.Count + 1, IsActive = true });
    }

    private void EditSubcat(EventCatSubDto subcat)
    {
        editingSubcatId = subcat.Id;
        editModel = new EventCatSubDto
        {
            Id = subcat.Id,
            EventCatId = subcat.EventCatId,
            Name = subcat.Name,
            Description = subcat.Description,
            DisplayOrder = subcat.DisplayOrder,
            IsActive = subcat.IsActive,
            Icon = subcat.Icon ?? string.Empty,
            ColorClass = subcat.ColorClass ?? string.Empty
        };
        showSubcatModal = true;
    }

    private void CloseSubcatModal()
    {
        showSubcatModal = false;
    }

    private async Task SaveEdit()
    {
        try
        {
            // Create the EventCatSubCreateDTO to match what the controller expects
            var dto = new EventCatSubCreateDTO
            {
                EventCatId = editModel.EventCatId,
                Name = editModel.Name,
                Description = editModel.Description,
                DisplayOrder = editModel.DisplayOrder,
                IsActive = editModel.IsActive,
                Icon = editModel.Icon ?? string.Empty,
                ColorClass = editModel.ColorClass ?? string.Empty
            };

            HttpResponseMessage response;
            if (editModel.Id > 0)
            {
                response = await Http.PutAsJsonAsync($"api/eventcatsub/{editModel.Id}", dto);
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/eventcatsub", dto);
            }

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Sub-category saved successfully!";
                editingSubcatId = null;
                showSubcatModal = false;
                await LoadSubCategories(editModel.EventCatId);
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error saving sub-category: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving sub-category: {ex.Message}";
        }
    }

    private async Task DeleteSubcat(int id)
    {
        await Http.DeleteAsync($"api/eventcatsub/{id}");
        editingSubcatId = null;
        if (editingEventCat.Id > 0)
            await LoadSubCategories(editingEventCat.Id);
    }

    private void MoveUp(int id) { /* Move logic */ }
    private void MoveDown(int id) { /* Move logic */ }

    public class EventCatDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Slug { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsActive { get; set; }
        public int Size { get; set; }
        public string Icon { get; set; } = string.Empty;
        public string ColorClass { get; set; } = string.Empty;
    }
    public class EventDto
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public EventCatDto? EventCat { get; set; }
    }
    public class CreateEventCatDto
    {
        public int Id { get; set; }
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = string.Empty;
        [System.ComponentModel.DataAnnotations.Required(ErrorMessage = "Slug is required")]
        public string Slug { get; set; } = string.Empty;
        [System.ComponentModel.DataAnnotations.StringLength(500, ErrorMessage = "Description cannot be longer than 500 characters")]
        public string Description { get; set; } = string.Empty;
        [System.ComponentModel.DataAnnotations.Range(0, 999, ErrorMessage = "Display order must be between 0 and 999")]
        public int DisplayOrder { get; set; } = 0;
        public bool IsActive { get; set; } = true;
        [System.ComponentModel.DataAnnotations.Range(0, 1, ErrorMessage = "Size must be Half (0) or Full (1)")]
        public int Size { get; set; } = 1;
        [System.ComponentModel.DataAnnotations.StringLength(50, ErrorMessage = "Icon class cannot be longer than 50 characters")]
        public string Icon { get; set; } = string.Empty;
        [System.ComponentModel.DataAnnotations.StringLength(30, ErrorMessage = "Color class cannot be longer than 30 characters")]
        public string ColorClass { get; set; } = string.Empty;

    }
    public class EventCatSubDto
    {
        public int Id { get; set; }
        public int EventCatId { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public int DisplayOrder { get; set; } = 0;
        public bool IsActive { get; set; } = true;
        public string Icon { get; set; } = string.Empty;
        public string ColorClass { get; set; } = string.Empty;
    }

    public class EventCatSubCreateDTO
    {
        public int EventCatId { get; set; }
        public string Name { get; set; } = string.Empty;
        public int DisplayOrder { get; set; }
        public bool IsActive { get; set; }
        public string Description { get; set; } = string.Empty;
        public string Icon { get; set; } = string.Empty;
        public string ColorClass { get; set; } = string.Empty;
    }
}

<script src="js/scrollToEditForm.js"></script>