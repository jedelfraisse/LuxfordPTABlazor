@page "/admin/events/edit/{eventId:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.DTOs
@using LuxfordPTAWeb.Shared.Enums
@using LuxfordPTAWeb.Shared.Interfaces
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin,BoardMember")]

@code {
    [Parameter] public int EventId { get; set; }
    
    private Event? eventModel;
    private EventDay primaryDay = new();
    private List<EventDay> additionalDays = new();
    private List<EventDay> originalEventDays = new(); // Track original days for restoration
    private List<SchoolYear>? schoolYears;
    private List<EventCat>? eventCategories;
    private List<EventCatSub>? eventSubcategories;
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private int eventSubCategoryId = 0;
    private string changeNotes = string.Empty;
    
    // Primary day time tracking
    private bool primaryDayIsAllDay = true;
    private string primaryDayStartTime = "09:00";
    private string primaryDayEndTime = "15:00";
    
    // Additional days time tracking
    private Dictionary<int, string> dayStartTimes = new();
    private Dictionary<int, string> dayEndTimes = new();
    private Dictionary<int, bool> dayIsAllDay = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDropdownData();
        await LoadEvent();
        isLoading = false;
    }
    
    private async Task LoadDropdownData()
    {
        try
        {
            schoolYears = await Http.GetFromJsonAsync<List<SchoolYear>>("api/schoolyears");
            eventCategories = await Http.GetFromJsonAsync<List<EventCat>>("api/eventcat");
            eventSubcategories = await Http.GetFromJsonAsync<List<EventCatSub>>("api/eventcatsub");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading data: {ex.Message}";
        }
    }
    
    private async Task LoadEvent()
    {
        try
        {
            eventModel = await Http.GetFromJsonAsync<Event>($"api/events/{EventId}");
            if (eventModel == null)
            {
                errorMessage = "Event not found.";
                return;
            }
            
            // Set the subcategory ID for the dropdown
            eventSubCategoryId = eventModel.EventSubTypeId ?? 0;
            
            // Load event days
            var eventDays = await Http.GetFromJsonAsync<List<EventDay>>($"api/events/{EventId}/days");
            if (eventDays?.Any() == true)
            {
                originalEventDays = eventDays.ToList(); // Keep original for restoration
                
                // Set up primary day (Day 1 or first day)
                var firstDay = eventDays.OrderBy(d => d.DayNumber).First();
                primaryDay = firstDay;
                
                // Initialize primary day time tracking
                primaryDayIsAllDay = firstDay.StartTime == null;
                primaryDayStartTime = firstDay.StartTime?.ToString("HH:mm") ?? "09:00";
                primaryDayEndTime = firstDay.EndTime?.ToString("HH:mm") ?? "15:00";
                
                // Set up additional days (Day 2+)
                additionalDays = eventDays.Where(d => d.DayNumber > 1).OrderBy(d => d.DayNumber).ToList();
                
                // Initialize additional days time tracking
                foreach (var day in additionalDays)
                {
                    dayIsAllDay[day.DayNumber] = day.StartTime == null;
                    dayStartTimes[day.DayNumber] = day.StartTime?.ToString("HH:mm") ?? "09:00";
                    dayEndTimes[day.DayNumber] = day.EndTime?.ToString("HH:mm") ?? "15:00";
                }
            }
            else
            {
                // Single day event - create primary day from main event data
                primaryDay = new EventDay
                {
                    DayNumber = 1,
                    Date = eventModel.Date,
                    DayTitle = "",
                    Description = "",
                    Location = eventModel.Location,
                    IsActive = true,
                    EventId = EventId
                };
                
                // Initialize primary day time tracking from event times
                primaryDayIsAllDay = eventModel.EventStartTime == eventModel.EventEndTime;
                primaryDayStartTime = eventModel.EventStartTime.ToString("HH:mm");
                primaryDayEndTime = eventModel.EventEndTime.ToString("HH:mm");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading event: {ex.Message}";
        }
    }

    private void AddAdditionalDay()
    {
        var nextDayNumber = additionalDays.Any() ? additionalDays.Max(d => d.DayNumber) + 1 : 2; // Start from 2 since primary is 1
        var lastDate = additionalDays.Any() ? additionalDays.Max(d => d.Date) : primaryDay.Date;
        var newDay = new EventDay
        {
            DayNumber = nextDayNumber,
            Date = lastDate.AddDays(1),
            DayTitle = $"Day {nextDayNumber}",
            Description = "",
            Location = "",
            IsActive = true,
            EventId = EventId
        };
        
        additionalDays.Add(newDay);
        
        // Initialize as all-day by default
        dayIsAllDay[newDay.DayNumber] = true;
        dayStartTimes[newDay.DayNumber] = "09:00";
        dayEndTimes[newDay.DayNumber] = "15:00";
    }

    private void RemoveAdditionalDay(EventDay day)
    {
        additionalDays.Remove(day);
        dayIsAllDay.Remove(day.DayNumber);
        dayStartTimes.Remove(day.DayNumber);
        dayEndTimes.Remove(day.DayNumber);
        
        // Renumber remaining additional days (keeping primary as day 1)
        var orderedDays = additionalDays.OrderBy(d => d.Date).ToList();
        additionalDays.Clear();
        dayIsAllDay.Clear();
        dayStartTimes.Clear();
        dayEndTimes.Clear();
        
        for (int i = 0; i < orderedDays.Count; i++)
        {
            orderedDays[i].DayNumber = i + 2; // Start from 2 since primary is 1
            additionalDays.Add(orderedDays[i]);
            
            // Re-initialize time tracking
            dayIsAllDay[orderedDays[i].DayNumber] = orderedDays[i].StartTime == null;
            dayStartTimes[orderedDays[i].DayNumber] = orderedDays[i].StartTime?.ToString("HH:mm") ?? "09:00";
            dayEndTimes[orderedDays[i].DayNumber] = orderedDays[i].EndTime?.ToString("HH:mm") ?? "15:00";
        }
    }
    
    private void RestoreAdditionalDays()
    {
        if (originalEventDays.Count <= 1) return;
        
        // Restore all days except the first one (which is the primary day)
        var daysToRestore = originalEventDays.Where(d => d.DayNumber > 1).OrderBy(d => d.DayNumber).ToList();
        
        additionalDays.Clear();
        dayStartTimes.Clear();
        dayEndTimes.Clear();
        dayIsAllDay.Clear();
        
        foreach (var day in daysToRestore)
        {
            additionalDays.Add(new EventDay
            {
                Id = day.Id, // Keep original ID for updates
                EventId = EventId,
                DayNumber = day.DayNumber,
                Date = day.Date,
                DayTitle = day.DayTitle,
                Description = day.Description,
                Location = day.Location,
                StartTime = day.StartTime,
                EndTime = day.EndTime,
                IsActive = day.IsActive,
                SpecialInstructions = day.SpecialInstructions,
                MaxAttendees = day.MaxAttendees,
                EstimatedAttendees = day.EstimatedAttendees,
                WeatherBackupPlan = day.WeatherBackupPlan
            });
            
            // Initialize time tracking
            dayIsAllDay[day.DayNumber] = day.StartTime == null;
            dayStartTimes[day.DayNumber] = day.StartTime?.ToString("HH:mm") ?? "09:00";
            dayEndTimes[day.DayNumber] = day.EndTime?.ToString("HH:mm") ?? "15:00";
        }
    }
    
    // Primary day time management (same as create form)
    private void OnPrimaryDayAllDayChanged(bool isAllDay)
    {
        primaryDayIsAllDay = isAllDay;
        
        if (isAllDay)
        {
            primaryDay.StartTime = null;
            primaryDay.EndTime = null;
        }
        else
        {
            UpdatePrimaryStartTime();
            UpdatePrimaryEndTime();
        }
    }
    
    private void UpdatePrimaryStartTime()
    {
        if (!primaryDayIsAllDay && TimeSpan.TryParse(primaryDayStartTime, out var startTime))
        {
            primaryDay.StartTime = primaryDay.Date.Date.Add(startTime);
        }
    }
    
    private void UpdatePrimaryEndTime()
    {
        if (!primaryDayIsAllDay && TimeSpan.TryParse(primaryDayEndTime, out var endTime))
        {
            primaryDay.EndTime = primaryDay.Date.Date.Add(endTime);
        }
    }
    
    private void UpdatePrimaryStartTimeFromInput(string? timeValue)
    {
        if (!string.IsNullOrEmpty(timeValue))
        {
            primaryDayStartTime = timeValue;
            UpdatePrimaryStartTime();
        }
    }
    
    private void UpdatePrimaryEndTimeFromInput(string? timeValue)
    {
        if (!string.IsNullOrEmpty(timeValue))
        {
            primaryDayEndTime = timeValue;
            UpdatePrimaryEndTime();
        }
    }
    
    // Additional days time management (same as create form)
    private bool GetIsAllDay(EventDay day)
    {
        return dayIsAllDay.GetValueOrDefault(day.DayNumber, true);
    }
    
    private string GetStartTimeString(EventDay day)
    {
        return dayStartTimes.GetValueOrDefault(day.DayNumber, "09:00");
    }
    
    private string GetEndTimeString(EventDay day)
    {
        return dayEndTimes.GetValueOrDefault(day.DayNumber, "15:00");
    }
    
    private void OnAllDayChanged(EventDay day, bool isAllDay)
    {
        dayIsAllDay[day.DayNumber] = isAllDay;
        
        if (isAllDay)
        {
            day.StartTime = null;
            day.EndTime = null;
        }
        else
        {
            UpdateStartTime(day);
            UpdateEndTime(day);
        }
    }
    
    private void UpdateStartTime(EventDay day)
    {
        if (!GetIsAllDay(day) && TimeSpan.TryParse(GetStartTimeString(day), out var startTime))
        {
            day.StartTime = day.Date.Date.Add(startTime);
        }
    }
    
    private void UpdateEndTime(EventDay day)
    {
        if (!GetIsAllDay(day) && TimeSpan.TryParse(GetEndTimeString(day), out var endTime))
        {
            day.EndTime = day.Date.Date.Add(endTime);
        }
    }
    
    private void UpdateStartTimeFromInput(EventDay day, string? timeValue)
    {
        if (!string.IsNullOrEmpty(timeValue))
        {
            dayStartTimes[day.DayNumber] = timeValue;
            UpdateStartTime(day);
        }
    }
    
    private void UpdateEndTimeFromInput(EventDay day, string? timeValue)
    {
        if (!string.IsNullOrEmpty(timeValue))
        {
            dayEndTimes[day.DayNumber] = timeValue;
            UpdateEndTime(day);
        }
    }

    private async Task SaveEvent()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isSaving = true;
        
        try
        {
            if (eventModel == null) return;

            // Validate required fields
            if (string.IsNullOrWhiteSpace(eventModel.Title))
            {
                errorMessage = "Event title is required.";
                return;
            }
            if (eventModel.SchoolYearId == 0)
            {
                errorMessage = "Please select a school year.";
                return;
            }
            if (eventModel.EventCatId == 0)
            {
                errorMessage = "Please select an event category.";
                return;
            }
            
            // Validate primary day has a date
            if (primaryDay.Date == DateTime.MinValue)
            {
                errorMessage = "Please set a date for the event.";
                return;
            }
            
            // Create UpdateEventDTO with all the event data
            var updateDto = new UpdateEventDTO
            {
                Id = eventModel.Id,
                Title = eventModel.Title,
                Date = primaryDay.Date,
                Description = eventModel.Description,
                Location = eventModel.Location,
                ImageUrl = eventModel.ImageUrl,
                Link = eventModel.Link,
                EventCoordinatorId = eventModel.EventCoordinatorId,
                Status = eventModel.Status,
                EventStartTime = primaryDay.StartTime ?? primaryDay.Date.AddHours(9),
                EventEndTime = primaryDay.EndTime ?? primaryDay.Date.AddHours(15),
                SetupStartTime = eventModel.SetupStartTime,
                CleanupEndTime = eventModel.CleanupEndTime,
                MaxAttendees = eventModel.MaxAttendees,
                EstimatedAttendees = eventModel.EstimatedAttendees,
                RequiresVolunteers = eventModel.RequiresVolunteers,
                RequiresSetup = eventModel.RequiresSetup,
                RequiresCleanup = eventModel.RequiresCleanup,
                Notes = eventModel.Notes,
                PublicInstructions = eventModel.PublicInstructions,
                WeatherBackupPlan = eventModel.WeatherBackupPlan,
                SchoolYearId = eventModel.SchoolYearId,
                EventCatId = eventModel.EventCatId,
                EventSubTypeId = eventSubCategoryId > 0 ? eventSubCategoryId : null,
                ExcelImportId = eventModel.ExcelImportId,
                ChangeNotes = changeNotes
            };
            
            // Update main event
            HttpResponseMessage response = await Http.PutAsJsonAsync($"api/events/{EventId}", updateDto);
            if (!response.IsSuccessStatusCode)
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error updating event: {error}";
                return;
            }
            
            // Handle event days
            // First, save/update primary day
            primaryDay.EventId = EventId;
            primaryDay.DayNumber = 1;
            
            if (primaryDay.Id > 0)
            {
                // Update existing day
                await Http.PutAsJsonAsync($"api/events/{EventId}/days/{primaryDay.Id}", primaryDay);
            }
            else
            {
                // Create new day
                var dayResponse = await Http.PostAsJsonAsync($"api/events/{EventId}/days", primaryDay);
                if (dayResponse.IsSuccessStatusCode)
                {
                    var createdDay = await dayResponse.Content.ReadFromJsonAsync<EventDay>();
                    if (createdDay != null)
                        primaryDay.Id = createdDay.Id;
                }
            }
            
            // Handle additional days
            foreach (var day in additionalDays)
            {
                day.EventId = EventId;
                
                if (day.Id > 0)
                {
                    // Update existing day
                    await Http.PutAsJsonAsync($"api/events/{EventId}/days/{day.Id}", day);
                }
                else
                {
                    // Create new day
                    await Http.PostAsJsonAsync($"api/events/{EventId}/days", day);
                }
            }
            
            // Remove any days that were deleted (existed originally but not in current lists)
            var currentDayIds = new List<int>();
            if (primaryDay.Id > 0) currentDayIds.Add(primaryDay.Id);
            currentDayIds.AddRange(additionalDays.Where(d => d.Id > 0).Select(d => d.Id));
            
            var originalDayIds = originalEventDays.Select(d => d.Id).ToList();
            var daysToDelete = originalDayIds.Except(currentDayIds).ToList();
            
            foreach (var dayIdToDelete in daysToDelete)
            {
                await Http.DeleteAsync($"api/events/{EventId}/days/{dayIdToDelete}");
            }
            
            successMessage = "Event updated successfully!";
            
            // Clear change notes after successful save
            changeNotes = string.Empty;
            
            // Reload the event to get updated audit information
            await LoadEvent();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private void OnCategoryChanged()
    {
        // Reset subcategory when category changes
        eventSubCategoryId = 0;
        StateHasChanged();
    }

    private void CancelEdit()
    {
        NavigationManager.NavigateTo("/admin/events");
    }
}

<PageTitle>Edit Event</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>
        <i class="bi bi-pencil-square"></i> Edit Event
        @if (!string.IsNullOrEmpty(eventModel?.Title))
        {
            <small class="text-muted">- @eventModel.Title</small>
        }
    </h1>
    <div>
        <a href="/admin/events" class="btn btn-outline-secondary me-2">
            <i class="bi bi-arrow-left"></i> Back to Events
        </a>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}

@if (isLoading)
{
    <div class="alert alert-info">
        <em>Loading event details...</em>
    </div>
}
else if (eventModel != null)
{
    <div class="row">
        <div class="col-lg-8">
            <!-- Audit Trail Card -->
            @if (!string.IsNullOrEmpty(eventModel.CreatedBy))
            {
                <div class="card mb-4 border-info">
                    <div class="card-header bg-info text-white">
                        <h6 class="mb-0"><i class="bi bi-clock-history"></i> Event History</h6>
                    </div>
                    <div class="card-body py-2">
                        <div class="row">
                            <div class="col-md-6">
                                <small><strong>Created:</strong></small><br>
                                <small>@eventModel.CreatedOn.ToString("MMM d, yyyy 'at' h:mm tt")</small><br>
                                <small>by @eventModel.CreatedBy.GetDisplayName()</small>
                            </div>
                            <div class="col-md-6">
                                @if (eventModel.LastEditedOn != eventModel.CreatedOn)
                                {
                                    <small><strong>Last Modified:</strong></small><br>
                                    <small>@eventModel.LastEditedOn.ToString("MMM d, yyyy 'at' h:mm tt")</small><br>
                                    <small>by @eventModel.LastEditedBy.GetDisplayName()</small>
                                }
                                else
                                {
                                    <small class="text-muted">No edits yet</small>
                                }
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(eventModel.ChangeNotes) && eventModel.ChangeNotes != "Initial creation")
                        {
                            <div class="mt-2">
                                <small><strong>Last Change:</strong> @eventModel.ChangeNotes</small>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Basic Event Information -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-info-circle"></i> Basic Event Information</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-8">
                            <label for="title" class="form-label">Event Title *</label>
                            <input type="text" class="form-control" id="title" @bind="eventModel.Title" required />
                        </div>
                        <div class="col-md-4">
                            <label for="status" class="form-label">Status</label>
                            <select class="form-select" id="status" @bind="eventModel.Status">
                                <option value="@EventStatus.Planning">Planning</option>
                                <option value="@EventStatus.SubmittedForApproval">Submit for Approval</option>
                                <option value="@EventStatus.Active">Active</option>
                                <option value="@EventStatus.InProgress">In Progress</option>
                                <option value="@EventStatus.WrapUp">Wrap Up</option>
                                <option value="@EventStatus.Completed">Completed</option>
                                <option value="@EventStatus.Cancelled">Cancelled</option>
                            </select>
                        </div>
                    </div>

                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <textarea class="form-control" id="description" rows="4" @bind="eventModel.Description"></textarea>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="schoolYear" class="form-label">School Year *</label>
                            <select class="form-select" id="schoolYear" @bind="eventModel.SchoolYearId" required>
                                <option value="0">Select School Year</option>
                                @if (schoolYears != null)
                                {
                                    @foreach (var year in schoolYears)
                                    {
                                        <option value="@year.Id">@year.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="eventCategory" class="form-label">Event Category *</label>
                            <select class="form-select" id="eventCategory" @bind="eventModel.EventCatId" @bind:after="OnCategoryChanged" required>
                                <option value="0">Select Category</option>
                                @if (eventCategories != null)
                                {
                                    @foreach (var category in eventCategories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label for="eventSubCategory" class="form-label">Event Sub-Category</label>
                            <select class="form-select" id="eventSubCategory" @bind="eventSubCategoryId">
                                <option value="0">Select Sub-Category</option>
                                @if (eventSubcategories != null)
                                {
                                    @foreach (var subcat in eventSubcategories.Where(sc => sc.EventCatId == eventModel.EventCatId && sc.IsActive).OrderBy(sc => sc.DisplayOrder))
                                    {
                                        <option value="@subcat.Id">@subcat.Name</option>
                                    }
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label for="location" class="form-label">Location</label>
                            <input type="text" class="form-control" id="location" @bind="eventModel.Location" />
                        </div>
                    </div>
                    
                    <!-- Primary Event Day -->
                    <div class="card border-primary mb-3">
                        <div class="card-header bg-primary text-white py-2">
                            <h6 class="mb-0"><i class="bi bi-calendar-date"></i> Primary Event Day</h6>
                        </div>
                        <div class="card-body py-3">
                            <div class="row mb-2">
                                <div class="col-md-6">
                                    <label for="eventDate" class="form-label">Event Date *</label>
                                    <input type="date" class="form-control" id="eventDate" @bind="primaryDay.Date" @bind:format="yyyy-MM-dd" required />
                                </div>
                                <div class="col-md-6">
                                    <label for="dayTitle" class="form-label">Day Title (optional)</label>
                                    <input type="text" class="form-control" id="dayTitle" @bind="primaryDay.DayTitle" placeholder="e.g., 'Opening Day', 'Main Event'" />
                                </div>
                            </div>
                            
                            <!-- Time Range Section -->
                            <div class="mb-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="allDayPrimary" checked="@primaryDayIsAllDay" @onchange="@(e => OnPrimaryDayAllDayChanged((bool?)e.Value ?? false))" />
                                    <label class="form-check-label" for="allDayPrimary">All Day Event</label>
                                </div>
                            </div>
                            
                            @if (!primaryDayIsAllDay)
                            {
                                <div class="row mb-2">
                                    <div class="col-6">
                                        <label for="startTime" class="form-label">Start Time</label>
                                        <input type="time" class="form-control" id="startTime" value="@primaryDayStartTime" @onchange="@(e => UpdatePrimaryStartTimeFromInput(e.Value?.ToString()))" />
                                    </div>
                                    <div class="col-6">
                                        <label for="endTime" class="form-label">End Time</label>
                                        <input type="time" class="form-control" id="endTime" value="@primaryDayEndTime" @onchange="@(e => UpdatePrimaryEndTimeFromInput(e.Value?.ToString()))" />
                                    </div>
                                </div>
                            }
                            
                            <div class="mb-2">
                                <label for="dayDescription" class="form-label">Day-Specific Description (optional)</label>
                                <textarea class="form-control" id="dayDescription" rows="2" @bind="primaryDay.Description" placeholder="Specific activities or details for this day"></textarea>
                            </div>
                        </div>
                    </div>
                    
                    <div class="form-check mb-3">
                        <input class="form-check-input" type="checkbox" id="requiresVolunteers" @bind="eventModel.RequiresVolunteers">
                        <label class="form-check-label" for="requiresVolunteers">
                            Requires Volunteers
                        </label>
                    </div>
                </div>
            </div>

            <!-- Additional Event Days (if any exist) -->
            @if (additionalDays.Any())
            {
                <div class="card mb-4 border-info">
                    <div class="card-header d-flex justify-content-between align-items-center bg-light">
                        <h5 class="mb-0"><i class="bi bi-calendar-week"></i> Additional Event Days <span class="badge bg-info ms-2">Multi-Day Event</span></h5>
                        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="AddAdditionalDay">
                            <i class="bi bi-plus"></i> Add Another Day
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            @foreach (var day in additionalDays.OrderBy(d => d.DayNumber))
                            {
                                <div class="col-md-6 mb-3">
                                    <div class="card border-info">
                                        <div class="card-header d-flex justify-content-between align-items-center py-2">
                                            <small class="text-muted">Day @day.DayNumber</small>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => RemoveAdditionalDay(day)">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                        <div class="card-body py-2">
                                            <div class="mb-2">
                                                <label class="form-label small">Day Title</label>
                                                <input type="text" class="form-control form-control-sm" @bind="day.DayTitle" placeholder="e.g., 'Fire Safety Demo'" />
                                            </div>
                                            <div class="mb-2">
                                                <label class="form-label small">Date *</label>
                                                <input type="date" class="form-control form-control-sm" @bind="day.Date" @bind:format="yyyy-MM-dd" required />
                                            </div>
                                            <div class="mb-2">
                                                <label class="form-label small">Location (optional)</label>
                                                <input type="text" class="form-control form-control-sm" @bind="day.Location" placeholder="Override default location" />
                                            </div>
                                            
                                            <!-- Time Range Section -->
                                            <div class="mb-2">
                                                <div class="form-check">
                                                    <input class="form-check-input" type="checkbox" checked="@GetIsAllDay(day)" @onchange="@(e => OnAllDayChanged(day, (bool?)e.Value ?? false))" />
                                                    <label class="form-check-label small">All Day Event</label>
                                                </div>
                                            </div>
                                            
                                            @if (!GetIsAllDay(day))
                                            {
                                                <div class="row mb-2">
                                                    <div class="col-6">
                                                        <label class="form-label small">Start Time</label>
                                                        <input type="time" class="form-control form-control-sm" value="@GetStartTimeString(day)" @onchange="@(e => UpdateStartTimeFromInput(day, e.Value?.ToString()))" />
                                                    </div>
                                                    <div class="col-6">
                                                        <label class="form-label small">End Time</label>
                                                        <input type="time" class="form-control form-control-sm" value="@GetEndTimeString(day)" @onchange="@(e => UpdateEndTimeFromInput(day, e.Value?.ToString()))" />
                                                    </div>
                                                </div>
                                            }
                                            
                                            <div class="mb-2">
                                                <label class="form-label small">Description</label>
                                                <textarea class="form-control form-control-sm" rows="2" @bind="day.Description" placeholder="Day-specific activities"></textarea>
                                            </div>
                                            <div class="form-check">
                                                <input class="form-check-input" type="checkbox" @bind="day.IsActive" />
                                                <label class="form-check-label small">Active</label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            else if (originalEventDays.Count > 1)
            {
                <!-- Option to restore multi-day if it was originally multi-day -->
                <div class="card mb-4 border-warning">
                    <div class="card-body text-center py-4">
                        <h6 class="text-muted mb-3"><i class="bi bi-calendar-plus"></i> This was originally a @originalEventDays.Count-day event</h6>
                        <button type="button" class="btn btn-outline-warning" @onclick="RestoreAdditionalDays">
                            <i class="bi bi-arrow-clockwise"></i> Restore Additional Days
                        </button>
                        <p class="text-muted small mt-2">Click to restore the additional days from the original event</p>
                    </div>
                </div>
            }
            else
            {
                <!-- Multi-Day Option for single-day events -->
                <div class="card mb-4 border-info">
                    <div class="card-body text-center py-4">
                        <h6 class="text-muted mb-3"><i class="bi bi-calendar-plus"></i> Convert to multi-day event?</h6>
                        <button type="button" class="btn btn-outline-info" @onclick="AddAdditionalDay">
                            <i class="bi bi-plus-circle"></i> Add Additional Days
                        </button>
                        <p class="text-muted small mt-2">Perfect for events like Fire Prevention Week, Book Fair, Spirit Week, etc.</p>
                    </div>
                </div>
            }
        </div>

        <!-- Action Panel -->
        <div class="col-lg-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0"><i class="bi bi-gear"></i> Actions</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="changeNotes" class="form-label">Change Notes (optional)</label>
                        <textarea class="form-control" id="changeNotes" rows="3" @bind="changeNotes" placeholder="Describe what you changed and why..."></textarea>
                        <div class="form-text">These notes will be saved in the event history</div>
                    </div>
                    
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-success" @onclick="SaveEvent" disabled="@isSaving">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-save"></i> Save Changes
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="CancelEdit">
                            <i class="bi bi-x-circle"></i> Cancel
                        </button>
                    </div>
                    
                    <!-- Event Summary -->
                    <hr />
                    <h6>Event Summary</h6>
                    <ul class="list-unstyled small">
                        <li><strong>Total Days:</strong> @(1 + additionalDays.Count)</li>
                        <li><strong>Date Range:</strong> 
                            @{
                                var allEventDays = new List<EventDay> { primaryDay };
                                allEventDays.AddRange(additionalDays);
                                
                                if (allEventDays.Count > 1 && allEventDays.Any())
                                {
                                    var startDate = allEventDays.Min(d => d.Date);
                                    var endDate = allEventDays.Max(d => d.Date);
                                    <span>@startDate.ToString("MMM d") - @endDate.ToString("MMM d, yyyy")</span>
                                }
                                else if (primaryDay.Date != DateTime.MinValue)
                                {
                                    <span>@primaryDay.Date.ToString("MMM d, yyyy")</span>
                                }
                                else
                                {
                                    <span class="text-muted">Not set</span>
                                }
                            }
                        </li>
                        <li><strong>Status:</strong> <span class="badge bg-secondary">@eventModel.Status</span></li>
                        @if (primaryDayIsAllDay && additionalDays.All(d => GetIsAllDay(d)))
                        {
                            <li><strong>Time:</strong> <span class="text-muted">All Day</span></li>
                        }
                        else if (!primaryDayIsAllDay)
                        {
                            <li><strong>Primary Day Time:</strong> @primaryDayStartTime - @primaryDayEndTime</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="alert alert-warning">
        <em>Event not found or you don't have permission to edit it.</em>
    </div>
}
