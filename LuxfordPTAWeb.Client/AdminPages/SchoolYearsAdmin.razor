@page "/admin/school-years"

@using LuxfordPTAWeb.Shared.Models
@using LuxfordPTAWeb.Shared.Enums
@attribute [Microsoft.AspNetCore.Authorization.Authorize(Roles = "Admin,BoardMember")]
@inject HttpClient Http
@inject NavigationManager NavigationManager


<PageTitle>Manage School Years</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1><i class="bi bi-calendar3"></i> Manage School Years</h1>
    <div>
        <a href="/admin" class="btn btn-outline-secondary me-2">
            <i class="bi bi-arrow-left"></i> Back to Dashboard
        </a>
        <button type="button" class="btn btn-primary" @onclick="ShowCreateForm">
            <i class="bi bi-plus"></i> Add New School Year
        </button>
    </div>
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @errorMessage
        <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
    </div>
}

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @successMessage
        <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
    </div>
}

<!-- Current School Year Highlight -->
@if (currentSchoolYear != null)
{
    <div class="alert alert-success">
        <h6><i class="bi bi-calendar-check"></i> Current School Year</h6>
        <div class="d-flex justify-content-between align-items-center">
            <div>
                <strong>@currentSchoolYear.Name</strong> 
                <span class="text-muted">(@currentSchoolYear.StartDate.ToString("MMM yyyy") - @currentSchoolYear.EndDate.ToString("MMM yyyy"))</span>
            </div>
            <button type="button" class="btn btn-info btn-sm" @onclick="ShowTransitionForm">
                <i class="bi bi-arrow-right-circle"></i> Transition to New Year
            </button>
        </div>
    </div>
}

<!-- Year Transition Form -->
@if (showTransitionStep1)
{
    <div class="card mb-4 border-warning">
        <div class="card-header bg-warning text-dark">
            <h5 class="mb-0"><i class="bi bi-arrow-right-circle"></i> School Year Transition</h5>
        </div>
        <div class="card-body">
            <div class="alert alert-info">
                <strong>Important:</strong> This will create a new school year and begin the transition process. 
                This is typically done at the end of each academic year.
            </div>
            
            <EditForm Model="transitionModel" OnValidSubmit="TransitionToNewYear">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />
                
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="newYearName" class="form-label">New School Year Name *</label>
                            <InputText id="newYearName" @bind-Value="transitionModel.NewYearName" class="form-control" 
                                      placeholder="e.g., 2025-2026" />
                            <ValidationMessage For="() => transitionModel.NewYearName" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="newStartDate" class="form-label">Start Date *</label>
                            <InputDate id="newStartDate" @bind-Value="transitionModel.StartDate" class="form-control" />
                            <ValidationMessage For="() => transitionModel.StartDate" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="newEndDate" class="form-label">End Date *</label>
                            <InputDate id="newEndDate" @bind-Value="transitionModel.EndDate" class="form-control" />
                            <ValidationMessage For="() => transitionModel.EndDate" class="text-danger" />
                        </div>
                    </div>
                </div>
                
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <InputCheckbox id="archiveYear" @bind-Value="transitionModel.ArchiveCurrentYear" class="form-check-input" />
                            <label for="archiveYear" class="form-check-label">
                                Archive current year data
                            </label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-check mb-3">
                            <InputCheckbox id="copyEvents" @bind-Value="transitionModel.CopyRecurringEvents" class="form-check-input" />
                            <label for="copyEvents" class="form-check-label">
                                Copy recurring events to new year
                            </label>
                        </div>
                    </div>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-warning" disabled="@isTransitioning">
                        @if (isTransitioning)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-arrow-right-circle me-1"></i>
                        Begin Transition
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="CancelTransition">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (showTransitionStep2)
{
    <div class="card mb-4 border-info">
        <div class="card-header bg-info text-dark">
            <h5 class="mb-0"><i class="bi bi-arrow-right-circle"></i> Confirm School Year Transition</h5>
        </div>
        <div class="card-body">
            <div class="alert alert-warning">
                <strong>Are you sure?</strong> This will mark <b>@currentSchoolYear?.Name</b> as  and activate <b>@nextYearCandidate?.Name</b> as the new current school year.
            </div>
            <ul>
                <li>Archive current year data: <b>@(transitionModel.ArchiveCurrentYear ? "Yes" : "No")</b></li>
                <li>Copy recurring events: <b>@(transitionModel.CopyRecurringEvents ? "Yes" : "No")</b></li>
            </ul>
            <div class="d-flex gap-2">
                <button class="btn btn-success" @onclick="ConfirmTransitionToNewYear" disabled="@isTransitioning">
                    @if (isTransitioning)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                    }
                    <i class="bi bi-check-circle me-1"></i>
                    Confirm Transition
                </button>
                <button class="btn btn-outline-secondary" @onclick="CancelTransition">
                    <i class="bi bi-x-circle me-1"></i>
                    Cancel
                </button>
            </div>
        </div>
    </div>
}

<!-- Create/Edit Form -->
@if (showForm && !showTransitionStep1)
{
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="mb-0">@(editingSchoolYear?.Id > 0 ? "Edit" : "Create") School Year</h5>
        </div>
        <div class="card-body">
            <EditForm Model="editingSchoolYear" OnValidSubmit="SaveSchoolYear">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />
                
                <div class="row">
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="name" class="form-label">Name *</label>
                            <InputText id="name" @bind-Value="editingSchoolYear.Name" class="form-control" 
                                      placeholder="e.g., 2024-2025" />
                            <ValidationMessage For="() => editingSchoolYear.Name" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="startDate" class="form-label">Start Date *</label>
                            <InputDate id="startDate" @bind-Value="editingSchoolYear.StartDate" class="form-control" />
                            <ValidationMessage For="() => editingSchoolYear.StartDate" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="mb-3">
                            <label for="endDate" class="form-label">End Date *</label>
                            <InputDate id="endDate" @bind-Value="editingSchoolYear.EndDate" class="form-control" />
                            <ValidationMessage For="() => editingSchoolYear.EndDate" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="mb-3">
                        Reflection Theme: <InputText id="ReflectionTheme" @bind-Value="editingSchoolYear.ReflectionsTheme" class="form-control"
                        placeholder="Theme as assigned by Virginia PTA"/>
                    </div>
                </div>

                <div class="d-flex gap-2">
                    <button type="submit" class="btn btn-success" disabled="@isSaving">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                        }
                        <i class="bi bi-check-circle me-1"></i>
                        Save School Year
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="CancelForm">
                        <i class="bi bi-x-circle me-1"></i>
                        Cancel
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (schoolYears == null)
{
    <div class="alert alert-info">
        <em>Loading school years...</em>
    </div>
}
else if (!schoolYears.Any())
{
    <div class="alert alert-warning">
        <em>No school years found. Create your first school year above!</em>
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            <h5 class="mb-0">School Years (@schoolYears.Count)</h5>
        </div>
        <div class="table-responsive">
            <table class="table table-hover mb-0">
                <thead class="table-light">
                    <tr>
                        <th>Name</th>
                        <th>Reflections Theme</th>
                        <th>Period</th>
                        <th>Status</th>
                        <th>Events</th>
                        <th width="150">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var year in schoolYears.OrderByDescending(sy => sy.StartDate))
                    {
                        <tr class="@(year.Id == currentSchoolYear?.Id ? "table-success" : "")">
                            <td>
                                <strong>@year.Name</strong>
                                @if (year.Id == currentSchoolYear?.Id)
                                {
                                    <span class="badge bg-success ms-2">Current</span>
                                }
                            </td>
							<td>@(string.IsNullOrWhiteSpace(year.ReflectionsTheme) ? "<em class='text-muted'>N/A</em>" : year.ReflectionsTheme)</td>
                            <td>
                                @year.StartDate.ToString("MMM yyyy") - @year.EndDate.ToString("MMM yyyy")
                            </td>
                            <td>
                                <span class="badge @GetStatusBadgeClass(year)">
                                    @GetYearStatus(year)
                                </span>
                            </td>
                            <td>
                                <span class="text-muted">@GetEventCount(year.Id) events</span>
                            </td>
                            <td>
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary" title="Edit" @onclick="() => EditSchoolYear(year)">
                                        <i class="bi bi-pencil"></i>
                                    </button>
                                    <button type="button" class="btn btn-outline-danger" title="Delete" 
                                            @onclick="() => DeleteSchoolYear(year.Id)"
                                            disabled="@(GetEventCount(year.Id) > 0 || year.Id == currentSchoolYear?.Id)">
                                        <i class="bi bi-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code {
    private List<SchoolYear>? schoolYears;
    private List<Event>? events;
    private SchoolYear? currentSchoolYear;
    private CreateSchoolYearDto editingSchoolYear = new();
    private TransitionToNewYearDto transitionModel = new();
    private bool showForm = false;
    private bool isSaving = false;
    private bool isTransitioning = false;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    private bool showTransitionStep1 = false;
    private bool showTransitionStep2 = false;
    private SchoolYear? nextYearCandidate;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("SchoolYearsAdmin: Starting OnInitializedAsync");
        
        // Small delay to ensure auth context is ready
        await Task.Delay(100);
        
        await LoadSchoolYears();
        Console.WriteLine($"SchoolYearsAdmin: Loaded {schoolYears?.Count ?? 0} school years");
        await LoadEvents();
        Console.WriteLine($"SchoolYearsAdmin: Loaded {events?.Count ?? 0} events");
        await LoadCurrentSchoolYear();
        Console.WriteLine($"SchoolYearsAdmin: Current school year: {currentSchoolYear?.Name ?? "None"}");
        StateHasChanged(); // Force a re-render after all data is loaded
        Console.WriteLine("SchoolYearsAdmin: OnInitializedAsync completed");
    }

    private async Task LoadSchoolYears()
    {
        try
        {
            Console.WriteLine("SchoolYearsAdmin: Calling API /api/schoolyears");
            
            // Add authorization headers explicitly if needed
            var request = new HttpRequestMessage(HttpMethod.Get, "api/schoolyears");
            var response = await Http.SendAsync(request);
            
            Console.WriteLine($"SchoolYearsAdmin: API response status: {response.StatusCode}");
            
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"SchoolYearsAdmin: API response content length: {content.Length}");
                Console.WriteLine($"SchoolYearsAdmin: API response preview: {content.Take(200)}...");
                
                schoolYears = await response.Content.ReadFromJsonAsync<List<SchoolYear>>();
                Console.WriteLine($"SchoolYearsAdmin: Deserialized {schoolYears?.Count ?? 0} school years");
                
                if (schoolYears != null)
                {
                    foreach (var year in schoolYears)
                    {
                        Console.WriteLine($"SchoolYearsAdmin: Year {year.Name} - Visible: {year.IsVisibleToPublic}");
                    }
                }
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"SchoolYearsAdmin: API Error Response: {error}");
                errorMessage = $"API Error: {response.StatusCode} - {error}";
                schoolYears = new List<SchoolYear>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"SchoolYearsAdmin: Exception in LoadSchoolYears: {ex}");
            schoolYears = new List<SchoolYear>();
            errorMessage = $"Error loading school years: {ex.Message}";
        }
    }

    private async Task LoadEvents()
    {
        try
        {
            events = await Http.GetFromJsonAsync<List<Event>>("api/events/all-admin");
        }
        catch (Exception)
        {
            events = new List<Event>();
        }
    }

    private async Task LoadCurrentSchoolYear()
    {
        try
        {
            currentSchoolYear = await Http.GetFromJsonAsync<SchoolYear>("api/schoolyears/current");
        }
        catch (Exception)
        {
            // No current school year found
        }
    }

    // Rest of the component methods...
    private void ShowCreateForm()
    {
        var today = DateTime.Today;
        DateTime startDate;
        DateTime endDate;

        int currentYear = today.Month >= 7 ? today.Year : today.Year - 1;
        var lastYearStart = new DateTime(currentYear - 1, 7, 1);
        var lastYearEnd = new DateTime(currentYear, 6, 30);
        var nextYearStart = new DateTime(currentYear + 1, 7, 1);
        var nextYearEnd = new DateTime(currentYear + 2, 6, 30);

        bool canCreateLastYear = !schoolYears?.Any(sy => sy.StartDate == lastYearStart && sy.EndDate == lastYearEnd) ?? true;
        bool canCreateNextYear = !schoolYears?.Any(sy => sy.StartDate == nextYearStart && sy.EndDate == nextYearEnd) ?? true;

        if (canCreateLastYear)
        {
            startDate = lastYearStart;
            endDate = lastYearEnd;
        }
        else if (canCreateNextYear)
        {
            startDate = nextYearStart;
            endDate = nextYearEnd;
        }
        else
        {
            errorMessage = "Only last year or next year can be created.";
            return;
        }

        editingSchoolYear = new CreateSchoolYearDto
        {
            Name = $"{startDate.Year}-{endDate.Year}",
            StartDate = startDate,
            EndDate = endDate
        };
        showForm = true;
        showTransitionStep1 = false;
        showTransitionStep2 = false;
        ClearMessages();
    }

    private async Task ShowTransitionForm()
    {
        var today = DateTime.Today;
        int currentYear = today.Month >= 7 ? today.Year : today.Year - 1;
        var nextYearStart = new DateTime(currentYear + 1, 7, 1);
        var nextYearEnd = new DateTime(currentYear + 2, 6, 30);

        nextYearCandidate = schoolYears?.FirstOrDefault(sy => sy.StartDate == nextYearStart && sy.EndDate == nextYearEnd);
        showForm = false;
        if (nextYearCandidate == null)
        {
            // Prompt to create new year
            transitionModel = new TransitionToNewYearDto
            {
                NewYearName = $"{nextYearStart.Year}-{nextYearEnd.Year}",
                StartDate = nextYearStart,
                EndDate = nextYearEnd,
                ArchiveCurrentYear = true,
                CopyRecurringEvents = true
            };
            showTransitionStep1 = true;
            showTransitionStep2 = false;
        }
        else
        {
            // Prompt to confirm transition
            showTransitionStep1 = false;
            showTransitionStep2 = true;
        }
        ClearMessages();
    }

    private async Task CreateAndProceedToTransition()
    {
        // Validate dates
        if (schoolYears?.Any(sy =>
            (transitionModel.StartDate < sy.EndDate && transitionModel.EndDate > sy.StartDate)) ?? false)
        {
            errorMessage = "The new school year dates overlap with an existing year.";
            return;
        }
        if (transitionModel.StartDate >= transitionModel.EndDate)
        {
            errorMessage = "Start date must be before end date.";
            return;
        }

        // Create new year
        var newYearDto = new CreateSchoolYearDto
        {
            Name = transitionModel.NewYearName,
            StartDate = transitionModel.StartDate,
            EndDate = transitionModel.EndDate
        };
        var response = await Http.PostAsJsonAsync("api/schoolyears", newYearDto);
        if (response.IsSuccessStatusCode)
        {
            await LoadSchoolYears();
            nextYearCandidate = schoolYears?.FirstOrDefault(sy => sy.StartDate == newYearDto.StartDate && sy.EndDate == newYearDto.EndDate);
            showTransitionStep1 = false;
            showTransitionStep2 = true;
            successMessage = "New school year created. Please confirm transition.";
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = $"Error creating new year: {error}";
        }
    }

    private async Task ConfirmTransitionToNewYear()
    {
        if (currentSchoolYear == null || nextYearCandidate == null)
        {
            errorMessage = "Current or next school year not found.";
            return;
        }

        isTransitioning = true;
        ClearMessages();

        // Call API to close current year and activate next year
        var transitionPayload = new
        {
            NextYearId = nextYearCandidate.Id,
            ArchiveCurrentYear = transitionModel.ArchiveCurrentYear,
            CopyRecurringEvents = transitionModel.CopyRecurringEvents
        };
        var response = await Http.PostAsJsonAsync($"api/schoolyears/{currentSchoolYear.Id}/close-and-activate", transitionPayload);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Transitioned to new school year!";
            showTransitionStep2 = false;
            await LoadSchoolYears();
            await LoadCurrentSchoolYear();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            errorMessage = $"Error during transition: {error}";
        }
        isTransitioning = false;
    }

    private void CancelForm()
    {
        showForm = false;
        editingSchoolYear = new CreateSchoolYearDto();
    }

    private void CancelTransition()
    {
        showTransitionStep1 = false;
        showTransitionStep2 = false;
        transitionModel = new TransitionToNewYearDto();
    }

    private void ClearMessages()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task SaveSchoolYear()
    {
        isSaving = true;
        ClearMessages();

        try
        {
            HttpResponseMessage response;

            if (editingSchoolYear.Id > 0)
            {
                response = await Http.PutAsJsonAsync($"api/schoolyears/{editingSchoolYear.Id}", editingSchoolYear);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "School year updated successfully!";
                }
            }
            else
            {
                response = await Http.PostAsJsonAsync("api/schoolyears", editingSchoolYear);
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "School year created successfully!";
                }
            }

            if (response.IsSuccessStatusCode)
            {
                showForm = false;
                await LoadSchoolYears();
                await LoadCurrentSchoolYear();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error saving school year: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving school year: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task TransitionToNewYear()
    {
        if (currentSchoolYear == null) return;

        isTransitioning = true;
        ClearMessages();

        try
        {
            var response = await Http.PostAsJsonAsync($"api/schoolyears/{currentSchoolYear.Id}/transition", transitionModel);

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Successfully transitioned to new school year!";
                showTransitionStep1 = false;
                showTransitionStep2 = false;
                await LoadSchoolYears();
                await LoadCurrentSchoolYear();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error during transition: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error during transition: {ex.Message}";
        }
        finally
        {
            isTransitioning = false;
        }
    }

    private void EditSchoolYear(SchoolYear schoolYear)
    {
        editingSchoolYear = new CreateSchoolYearDto
        {
            Id = schoolYear.Id,
            Name = schoolYear.Name,
            StartDate = schoolYear.StartDate,
            EndDate = schoolYear.EndDate,
            PrintableEventCalendar = schoolYear.PrintableEventCalendar,
            ReflectionsTheme = schoolYear.ReflectionsTheme,
            Status = schoolYear.Status,
            IsVisibleToPublic = schoolYear.IsVisibleToPublic
        };
        showForm = true;
        showTransitionStep1 = false;
        showTransitionStep2 = false;
        ClearMessages();
    }

    private async Task DeleteSchoolYear(int id)
    {
        if (!await ConfirmDelete()) return;

        try
        {
            var response = await Http.DeleteAsync($"api/schoolyears/{id}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "School year deleted successfully!";
                await LoadSchoolYears();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error deleting school year: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting school year: {ex.Message}";
        }
    }

    private async Task<bool> ConfirmDelete()
    {
        return await Task.FromResult(true);
    }

    private int GetEventCount(int schoolYearId)
    {
        return events?.Count(e => e.SchoolYearId == schoolYearId) ?? 0;
    }

    private string GetYearStatus(SchoolYear year)
    {
        var now = DateTime.Now;
        if (now < year.StartDate) return "Future";
        if (now > year.EndDate) return "Past";
        return "Active";
    }

    private string GetStatusBadgeClass(SchoolYear year)
    {
        var status = GetYearStatus(year);
        return status switch
        {
            "Active" => "bg-success",
            "Future" => "bg-primary",
            "Past" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }

    // DTO Classes for form binding
    public class CreateSchoolYearDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string PrintableEventCalendar { get; set; } = string.Empty;
        public string ReflectionsTheme { get; set; } = string.Empty;
        public bool IsVisibleToPublic { get; set; } = false;
        public SchoolYearStatus Status { get; set; } = SchoolYearStatus.FutureYear;
    }

    public class TransitionToNewYearDto
    {
        [System.ComponentModel.DataAnnotations.Required]
        public string NewYearName { get; set; } = string.Empty;
        
        [System.ComponentModel.DataAnnotations.Required]
        public DateTime StartDate { get; set; } = DateTime.Now.AddMonths(6).Date;
        
        [System.ComponentModel.DataAnnotations.Required]
        public DateTime EndDate { get; set; } = DateTime.Now.AddYears(1).AddMonths(6).Date;
        
        public bool ArchiveCurrentYear { get; set; } = true;
        public bool CopyRecurringEvents { get; set; } = true;
    }

}