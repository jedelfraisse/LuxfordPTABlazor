@page "/Account/Manage/Email"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using LuxfordPTAWeb.Data
@using LuxfordPTAWeb.Shared.Models

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Manage email</PageTitle>

<h3>Manage email</h3>
<p class="text-muted">Update your email address, verification status, and communication preferences.</p>

<StatusMessage Message="@message"/>
<div class="row">
    <div class="col-xl-8">
        <!-- Email Settings Card -->
        <div class="card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0"><i class="bi bi-envelope me-2"></i>Email Settings</h5>
            </div>
            <div class="card-body">
                <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
                    <AntiforgeryToken />
                </form>
                <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" role="alert" />
                    
                    @if (isEmailConfirmed)
                    {
                        <div class="form-floating mb-3 input-group">
                            <input type="text" value="@email" id="email" class="form-control" placeholder="Enter your email" disabled />
                            <div class="input-group-append">
                                <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                            </div>
                            <label for="email" class="form-label">Current Email</label>
                        </div>
                        <div class="alert alert-success small">
                            <i class="bi bi-check-circle me-1"></i>
                            Your email address is verified.
                        </div>
                    }
                    else
                    {
                        <div class="form-floating mb-2">
                            <input type="text" value="@email" id="email" class="form-control" placeholder="Enter your email" disabled />
                            <label for="email" class="form-label">Current Email</label>
                        </div>
                        <div class="alert alert-warning small mb-3">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            Your email address is not verified.
                            <button type="submit" class="btn btn-link btn-sm p-0 ms-1" form="send-verification-form">
                                Send verification email
                            </button>
                        </div>
                    }
                    
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.NewEmail" id="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter a new email" />
                        <label for="Input.NewEmail" class="form-label">New email</label>
                        <ValidationMessage For="() => Input.NewEmail" class="text-danger" />
                    </div>
                    
                    <button type="submit" class="w-100 btn btn-lg btn-primary">
                        <i class="bi bi-envelope-check me-2"></i>Change email
                    </button>
                </EditForm>
            </div>
        </div>

        <!-- Communication Preferences Card -->
        <div class="card mb-4">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0"><i class="bi bi-bell me-2"></i>Communication Preferences</h5>
            </div>
            <div class="card-body">
                <EditForm Model="CommunicationInput" FormName="communication-preferences" OnValidSubmit="OnCommunicationSubmitAsync" method="post">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger mb-3" role="alert" />
                    
                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="CommunicationInput.ReceiveEmailNotifications" id="CommunicationInput.ReceiveEmailNotifications" class="form-check-input" />
                        <label for="CommunicationInput.ReceiveEmailNotifications" class="form-check-label">
                            <strong>Email Notifications</strong>
                            <div class="text-muted small">Receive email updates about PTA events, meetings, and announcements</div>
                        </label>
                    </div>
                    
                    <div class="form-check mb-3">
                        <InputCheckbox @bind-Value="CommunicationInput.ReceiveSmsNotifications" id="CommunicationInput.ReceiveSmsNotifications" class="form-check-input" />
                        <label for="CommunicationInput.ReceiveSmsNotifications" class="form-check-label">
                            <strong>SMS Notifications</strong>
                            <div class="text-muted small">Receive text messages for urgent updates (requires phone number)</div>
                        </label>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(user?.PhoneNumber))
                    {
                        <div class="alert alert-info small">
                            <i class="bi bi-info-circle me-1"></i>
                            SMS notifications will be sent to: <strong>@user.PhoneNumber</strong>
                        </div>
                    }
                    else if (CommunicationInput.ReceiveSmsNotifications)
                    {
                        <div class="alert alert-warning small">
                            <i class="bi bi-exclamation-triangle me-1"></i>
                            SMS notifications require a phone number. Please update your phone number in your 
                            <a href="/Account/Manage" class="alert-link">profile settings</a>.
                        </div>
                    }
                    
                    <button type="submit" class="w-100 btn btn-lg btn-info">
                        <i class="bi bi-check-circle me-2"></i>Save Communication Preferences
                    </button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private string? email;
    private bool isEmailConfirmed;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromForm(FormName = "communication-preferences")]
    private CommunicationInputModel CommunicationInput { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        email = await UserManager.GetEmailAsync(user);
        isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(user);

        Input.NewEmail ??= email;
        
        // Initialize communication preferences
        CommunicationInput.ReceiveEmailNotifications = user.ReceiveEmailNotifications;
        CommunicationInput.ReceiveSmsNotifications = user.ReceiveSmsNotifications;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == email)
        {
            message = "Your email is unchanged.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateChangeEmailTokenAsync(user, Input.NewEmail);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmailChange").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["email"] = Input.NewEmail, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, Input.NewEmail, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Confirmation link to change email sent. Please check your email.";
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (email is null)
        {
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });

        await EmailSender.SendConfirmationLinkAsync(user, email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private async Task OnCommunicationSubmitAsync()
    {
        bool hasChanges = false;

        if (CommunicationInput.ReceiveEmailNotifications != user.ReceiveEmailNotifications)
        {
            user.ReceiveEmailNotifications = CommunicationInput.ReceiveEmailNotifications;
            hasChanges = true;
        }

        if (CommunicationInput.ReceiveSmsNotifications != user.ReceiveSmsNotifications)
        {
            user.ReceiveSmsNotifications = CommunicationInput.ReceiveSmsNotifications;
            hasChanges = true;
        }

        if (hasChanges)
        {
            var updateResult = await UserManager.UpdateAsync(user);
            if (!updateResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to update communication preferences.", HttpContext);
                return;
            }
        }

        RedirectManager.RedirectToCurrentPageWithStatus("Your communication preferences have been updated successfully!", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "New email")]
        public string? NewEmail { get; set; }
    }

    private sealed class CommunicationInputModel
    {
        public bool ReceiveEmailNotifications { get; set; } = true;
        public bool ReceiveSmsNotifications { get; set; } = false;
    }
}
